<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iKoo&#39;s Dirty life</title>
  
  <subtitle>这里只是我的后花园，随性而写</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gythialy.github.io/"/>
  <updated>2018-08-16T08:02:00.280Z</updated>
  <id>https://gythialy.github.io/</id>
  
  <author>
    <name>gythialy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 antigen 管理 Zsh 配置</title>
    <link href="https://gythialy.github.io/zsh-config/"/>
    <id>https://gythialy.github.io/zsh-config/</id>
    <published>2018-08-06T01:46:53.000Z</published>
    <updated>2018-08-16T08:02:00.280Z</updated>
    
    <content type="html"><![CDATA[<h2>介绍</h2><p>Zsh 是一个 Linux 下强大的 shell, 由于大多数 Linux 产品安装，以及默认使用 bash shell, 但是丝毫不影响极客们对 zsh 的热衷, 几乎每一款 Linux 产品都包含有 zsh，通常可以用 apt-get、urpmi 或 yum 等包管理器进行安装</p><p>Zsh 具有以下主要特点：</p><ul><li>开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项</li><li>在用户启动的所有 shell 中共享命令历史</li><li>通过扩展的文件通配符，可以不利用外部命令达到 find 命令一般展开文件名</li><li>改进的变量与数组处理</li><li>在缓冲区中编辑多行命令</li><li>多种兼容模式，例如使用 / bin/sh 运行时可以伪装成 Bourne shell</li><li>可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏</li><li>可加载的模块，提供其他各种支持：完整的 TCP 与 Unix 域套接字控制，FTP 客户端与扩充过的数学函数</li><li>完全可定制化</li></ul><p>虽然说 Zsh 是开箱即用，但是为了更好用，还是需要一些定制化的配置。之前一直使用 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>, oh-my-zsh 把主题、插件等都是一起管理的，但是很多其他的主题和插件，且都是由不同的作者开发的，这样的话，管理起来就比较麻烦。<a href="https://github.com/zsh-users/antigen" target="_blank" rel="noopener">antigen</a> 就是针对此问题，应运而生。</p><p><a id="more"></a></p><h2>安装</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L git.io/antigen &gt; ~/antigen.zsh</span><br><span class="line"><span class="comment"># or use git.io/antigen-nightly for the latest version</span></span><br></pre></td></tr></table></figure></p><h2>配置</h2><p>在 <code>~/.zshrc</code> 中添加下面的内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/antigen.zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the oh-my-zsh's library.</span></span><br><span class="line">antigen use oh-my-zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bundles from the default repo (robbyrussell's oh-my-zsh).</span></span><br><span class="line">antigen bundle brew</span><br><span class="line">antigen bundle <span class="built_in">command</span>-not-found</span><br><span class="line">antigen bundle docker</span><br><span class="line">antigen bundle docker-compose</span><br><span class="line">antigen bundle gem</span><br><span class="line">antigen bundle git</span><br><span class="line">antigen bundle golang</span><br><span class="line">antigen bundle ng</span><br><span class="line">antigen bundle osx</span><br><span class="line">antigen bundle pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Syntax highlighting bundle.</span></span><br><span class="line">antigen bundle zsh-users/zsh-syntax-highlighting</span><br><span class="line">antigen bundle zsh-users/zsh-completions</span><br><span class="line">antigen bundle zsh-users/zsh-autosuggestions</span><br><span class="line">antigen bundle zsh-users/zsh-apple-touchbar</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the theme.</span></span><br><span class="line"><span class="comment"># antigen theme robbyrussell</span></span><br><span class="line">antigen theme https://github.com/denysdovhan/spaceship-prompt spaceship</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell Antigen that you're done.</span></span><br><span class="line">antigen apply</span><br></pre></td></tr></table></figure></p><h2>总结</h2><p>antigen 完全支持 oh-my-zsh, 第三方的插件或者主题通过 <code>antigen bundle</code> 的方式加载，非常方便。</p><p><img src="/uploads/antigen_zsh_snapshot.png" alt=""><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;Zsh 是一个 Linux 下强大的 shell, 由于大多数 Linux 产品安装，以及默认使用 bash shell, 但是丝毫不影响极客们对 zsh 的热衷, 几乎每一款 Linux 产品都包含有 zsh，通常可以用 apt-get、urpmi 或 yum 等包管理器进行安装&lt;/p&gt;
&lt;p&gt;Zsh 具有以下主要特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项&lt;/li&gt;
&lt;li&gt;在用户启动的所有 shell 中共享命令历史&lt;/li&gt;
&lt;li&gt;通过扩展的文件通配符，可以不利用外部命令达到 find 命令一般展开文件名&lt;/li&gt;
&lt;li&gt;改进的变量与数组处理&lt;/li&gt;
&lt;li&gt;在缓冲区中编辑多行命令&lt;/li&gt;
&lt;li&gt;多种兼容模式，例如使用 / bin/sh 运行时可以伪装成 Bourne shell&lt;/li&gt;
&lt;li&gt;可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏&lt;/li&gt;
&lt;li&gt;可加载的模块，提供其他各种支持：完整的 TCP 与 Unix 域套接字控制，FTP 客户端与扩充过的数学函数&lt;/li&gt;
&lt;li&gt;完全可定制化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然说 Zsh 是开箱即用，但是为了更好用，还是需要一些定制化的配置。之前一直使用 &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;oh-my-zsh&lt;/a&gt;, oh-my-zsh 把主题、插件等都是一起管理的，但是很多其他的主题和插件，且都是由不同的作者开发的，这样的话，管理起来就比较麻烦。&lt;a href=&quot;https://github.com/zsh-users/antigen&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;antigen&lt;/a&gt; 就是针对此问题，应运而生。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="zsh" scheme="https://gythialy.github.io/tags/zsh/"/>
    
      <category term="antigen" scheme="https://gythialy.github.io/tags/antigen/"/>
    
  </entry>
  
  <entry>
    <title>traefik 配置 docker 容器支持 HTTPS</title>
    <link href="https://gythialy.github.io/traefik-docker-tls-config/"/>
    <id>https://gythialy.github.io/traefik-docker-tls-config/</id>
    <published>2018-08-05T11:13:54.000Z</published>
    <updated>2018-08-16T08:02:00.280Z</updated>
    
    <content type="html"><![CDATA[<h2>介绍</h2><p><a href="https://traefik.io/" target="_blank" rel="noopener">traefik</a> 是一款开源的反向代理与负载均衡工具。它最大的优点是能够与常见的微服务系统直接整合，可以实现自动化动态配置。目前支持 Docker, Swarm, Mesos/Marathon, Mesos, Kubernetes, Consul, Etcd, Zookeeper, BoltDB, Rest API 等等后端模型。</p><p>为什么选择 traefik？</p><ul><li>Golang 编写，单文件部署，与系统无关，同时也提供小尺寸 Docker 镜像。</li><li>支持 Docker/Etcd 后端，天然连接我们的微服务集群。</li><li>内置 Web UI，管理相对方便。</li><li>自动配置 ACME(Let’s Encrypt) 证书功能。</li><li>性能尚可，我们也没有到压榨 LB 性能的阶段，易用性更重要。</li><li>Restful API 支持。</li><li>支持后端健康状态检查，根据状态自动配置。</li><li>支持动态加载配置文件和 graceful 重启。</li><li>支持 WebSocket 和 HTTP/2。</li></ul><p>借用官网的图，一图以蔽之<img src="/uploads/traefik_architecture.png" alt=""></p><p><a id="more"></a></p><h2>需求</h2><p>使用场景作为一个基于 <a href="https://angular.io/" target="_blank" rel="noopener">Angular</a> 的单页 App，与后端 Server通过 RESTful 接口通信，前后端都需要提供 https 支持。使用场景很简单，暂时也没有负载均衡。</p><h2>准备</h2><p>根据 traefik 的官方文档中关于 <a href="https://docs.traefik.io/configuration/acme/" target="_blank" rel="noopener">ACME</a> 的说明, <a href="https://www.cloudflare.com/" target="_blank" rel="noopener">Cloudflare</a> 是支持宽域名自动发证书的。</p><ul><li>把域名的 DNS 改成 Cloudflare 的</li><li>需要的是账户的邮箱地址和 Globel API key</li></ul><h2>配置</h2><p>traefik 的配置文件。可以挂载到 docker 容器上</p><p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># debug = true</span></span><br><span class="line"><span class="attr">logLevel</span> = <span class="string">"ERROR"</span> #DEBUG, INFO, WARN, ERROR, FATAL, PANIC</span><br><span class="line"><span class="attr">InsecureSkipVerify</span> = <span class="literal">true</span> </span><br><span class="line"><span class="attr">defaultEntryPoints</span> = [<span class="string">"https"</span>, <span class="string">"http"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># WEB interface of Traefik - it will show web page with overview of frontend and backend configurations </span></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">address</span> = <span class="string">":8080"</span></span><br><span class="line"><span class="section">  [web.auth.basic]</span></span><br><span class="line">  usersFile = "/shared/.htpasswd"</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force HTTPS</span></span><br><span class="line"><span class="section">[entryPoints]</span></span><br><span class="line"><span class="section">  [entryPoints.http]</span></span><br><span class="line">  address = ":80"</span><br><span class="line"><span class="section">    [entryPoints.http.redirect]</span></span><br><span class="line">    entryPoint = "https"</span><br><span class="line"><span class="section">  [entryPoints.https]</span></span><br><span class="line">  address = ":443"</span><br><span class="line"><span class="section">    [entryPoints.https.tls]</span></span><br><span class="line"><span class="section">  [entryPoints.ws]</span></span><br><span class="line"><span class="section">  [entryPoints.wss]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[file]</span></span><br><span class="line">  watch = true</span><br><span class="line">  filename = "/etc/traefik/rules.toml"</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's encrypt configuration</span></span><br><span class="line"><span class="section">[acme]</span></span><br><span class="line"><span class="attr">email</span> = <span class="string">"yong.gu@qlink.mobi"</span> #any email id will work</span><br><span class="line"><span class="attr">storage</span>=<span class="string">"/etc/traefik/acme/acme.json"</span></span><br><span class="line"><span class="attr">entryPoint</span> = <span class="string">"https"</span></span><br><span class="line"><span class="attr">acmeLogging</span>=<span class="literal">true</span> </span><br><span class="line"><span class="attr">onDemand</span> = <span class="literal">false</span> #create certificate when container is created</span><br><span class="line"><span class="section">[acme.dnsChallenge]</span></span><br><span class="line">  provider = "cloudflare"</span><br><span class="line">  delayBeforeCheck = 0</span><br><span class="line"><span class="section">[[acme.domains]]</span></span><br><span class="line">   main = "example.com"</span><br><span class="line"><span class="section">[[acme.domains]]</span></span><br><span class="line">   main = "*.example.com"</span><br><span class="line">   </span><br><span class="line"><span class="comment"># Connection to docker host system (docker.sock)</span></span><br><span class="line"><span class="section">[docker]</span></span><br><span class="line"><span class="attr">endpoint</span> = <span class="string">"unix:///var/run/docker.sock"</span></span><br><span class="line"><span class="attr">domain</span> = <span class="string">"example.com"</span></span><br><span class="line"><span class="attr">watch</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># This will hide all docker containers that don't have explicitly  </span></span><br><span class="line"><span class="comment"># set label to "enable"</span></span><br><span class="line"><span class="attr">exposedbydefault</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注：需要发证书的域名在 <code>acme.domains</code> 中配置，这里以 <code>example.com</code> 为例。</p></blockquote><p>docker-compose.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.5"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  qlc_wallet_server:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">qlcwallet-server:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">qlc_wallet_server</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"127.0.0.1:8888:8888"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">qlcwallet</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DB_PASS=/run/secrets/db_root_password</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./wallet-server/.env</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/app/config/.env</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./wallet-server/logs</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/var/log/wallet-server</span></span><br><span class="line"><span class="attr">    secrets:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db_root_password</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.enable=true"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.backend=qlc_wallet_server"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.api.port=8888"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.api.frontend.rule=Host:api.example.com"</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.docker.network=traefik"</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  qlc_wallet:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">qlcwallet:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">qlcwallet</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"127.0.0.1:4200:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">qlcwallet</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">    depends_on:</span> </span><br><span class="line"><span class="bullet">        -</span> <span class="string">qlc_wallet_server</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.enable=true"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.backend=qlc_wallet"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.port=80"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.frontend.rule=Host:wallet.example.com"</span>  </span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.docker.network=traefik"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  traefik:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">traefik:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    domainname:</span> <span class="string">example.com</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">qlcwallet</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"443:443"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CLOUDFLARE_EMAIL=/run/secrets/traefik_user</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CLOUDFLARE_API_KEY=/run/secrets/traefik_api</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.enable=true"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.backend=traefik"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.frontend.rule=Host:traefik.example.com"</span>  </span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.port=8080"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"traefik.docker.network=traefik"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:ro</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./traefik:/etc/traefik</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./shared:/shared</span></span><br><span class="line"><span class="attr">    secrets:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">traefik_api</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">traefik_user</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  qlcwallet:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">qlcwallet</span></span><br><span class="line"><span class="attr">  traefik:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">traefik</span></span><br><span class="line"></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line"><span class="attr">  db_root_password:</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">./secrets/db_password.txt</span></span><br><span class="line"><span class="attr">  traefik_api:</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">./secrets/api.txt</span></span><br><span class="line"><span class="attr">  traefik_user:</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">./secrets/user.txt</span></span><br></pre></td></tr></table></figure></p><p>这部分包含三部分</p><ul><li>qlc_wallet_server RESTful 服务器</li><li>qlc_wallet Angular 应用</li><li>traefik traefik 本身自带一个简单的 Web 后台，绑定在 8080 端口，可以选择性开启。</li></ul><p>这里以 labels 的形式配置，生产环境建议通过 <code>toml</code> 文件的方式配置，这样修改配置不要重启容器。traefik 默认是不会把容器对外发布的，需要手动设置。<code>traefik.port</code> 需要设置成容器内部端口，而不是绑定的外部端口。</p><h2>总结</h2><p>总的来说，traefik 配置简单，可以非常快速的搭建测试环境，很方便地支持宽域名证书。另外官方说是支持单容器多端口绑定到不同的 url 上的，但是我一直没试成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://traefik.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;traefik&lt;/a&gt; 是一款开源的反向代理与负载均衡工具。它最大的优点是能够与常见的微服务系统直接整合，可以实现自动化动态配置。目前支持 Docker, Swarm, Mesos/Marathon, Mesos, Kubernetes, Consul, Etcd, Zookeeper, BoltDB, Rest API 等等后端模型。&lt;/p&gt;
&lt;p&gt;为什么选择 traefik？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Golang 编写，单文件部署，与系统无关，同时也提供小尺寸 Docker 镜像。&lt;/li&gt;
&lt;li&gt;支持 Docker/Etcd 后端，天然连接我们的微服务集群。&lt;/li&gt;
&lt;li&gt;内置 Web UI，管理相对方便。&lt;/li&gt;
&lt;li&gt;自动配置 ACME(Let’s Encrypt) 证书功能。&lt;/li&gt;
&lt;li&gt;性能尚可，我们也没有到压榨 LB 性能的阶段，易用性更重要。&lt;/li&gt;
&lt;li&gt;Restful API 支持。&lt;/li&gt;
&lt;li&gt;支持后端健康状态检查，根据状态自动配置。&lt;/li&gt;
&lt;li&gt;支持动态加载配置文件和 graceful 重启。&lt;/li&gt;
&lt;li&gt;支持 WebSocket 和 HTTP/2。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;借用官网的图，一图以蔽之
&lt;img src=&quot;/uploads/traefik_architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="traefik" scheme="https://gythialy.github.io/tags/traefik/"/>
    
      <category term="docker" scheme="https://gythialy.github.io/tags/docker/"/>
    
      <category term="ACME" scheme="https://gythialy.github.io/tags/ACME/"/>
    
  </entry>
  
  <entry>
    <title>在一台机器上部署多个 GitHub deploy key</title>
    <link href="https://gythialy.github.io/setup-multiple-github-deploy-keys-in-one-machine/"/>
    <id>https://gythialy.github.io/setup-multiple-github-deploy-keys-in-one-machine/</id>
    <published>2018-07-22T05:05:25.000Z</published>
    <updated>2018-08-16T08:02:00.280Z</updated>
    
    <content type="html"><![CDATA[<h2>需求</h2><p>在 Github 有几个私有仓库需要做 CI/DI，由于是私有项目，不能用免费的 travis 处理，所以临时在一台服务器上部署了几个脚本，简单处理一下。GitHub 限制了每个项目都必须用不同的 deploy key，我又不想把我自己的私有 key 部署到服务器上。</p><h2>目标</h2><p>在一台机器上通过 deploy 拉取 GitHub 私有仓库的代码，编译后做自动部署。</p><h2>准备</h2><p>在做 CI/DI 的机器上分别生成不同的 deploy key，并添加到 GitHub repo 里。具体过程这里就不赘述了，官方 <a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">帮助文档</a> 写得特别清楚。</p><h2>配置</h2><ul><li><p>更改 git clone 的地址</p><p>一般地址的格式为为 <code>git@github.com:$user/$repo.git</code>。我们以三个 repo 为例，假定三个 repo 的名字分别为 repo1,repo2,repo3.</p><p>变化后的地址为：</p><ul><li><code>git@github.com:$user1/$repo1.git</code> =&gt; <code>ssh://git@$repo1.github.com/$user1/$repo1.git</code></li><li><code>git@github.com:$user1/$repo2.git</code> =&gt; <code>ssh://git@$repo2.github.com/$user1/$repo2.git</code></li><li><code>git@github.com:$user2/$repo3.git</code> =&gt; <code>ssh://git@$repo3.github.com/$user2/$repo3.git</code></li></ul></li><li><p>然后在 <code>~/.ssh/config</code> 中添加下面的配置</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Host repo1.github.com</span><br><span class="line">User git</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/repo1_rsa</span><br><span class="line"></span><br><span class="line">Host repo2.github.com</span><br><span class="line">User git</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/repo2_rsa</span><br><span class="line"></span><br><span class="line">Host repo3.github.com</span><br><span class="line">User git</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/repo3_rsa</span><br></pre></td></tr></table></figure></p></li></ul><h2>拉取代码</h2><p>以 <code>git clone ssh://git@$repo1.github.com/$user1/$repo1.git</code> 的方式拉取代码即可。如果是在修改配置前已经拉取下来的代码，可以修改 repo 的 url 为上面修改后的形式也是一样的。</p><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;需求&lt;/h2&gt;
&lt;p&gt;在 Github 有几个私有仓库需要做 CI/DI，由于是私有项目，不能用免费的 travis 处理，所以临时在一台服务器上部署了几个脚本，简单处理一下。GitHub 限制了每个项目都必须用不同的 deploy key，我又不想把我自己的私有 key
      
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="GitHub" scheme="https://gythialy.github.io/tags/GitHub/"/>
    
      <category term="SSH" scheme="https://gythialy.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>使用 Visual Studio Code 调试 Angular 工程</title>
    <link href="https://gythialy.github.io/howto-debug-angular-with-vscode/"/>
    <id>https://gythialy.github.io/howto-debug-angular-with-vscode/</id>
    <published>2018-07-22T02:58:46.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h2>准备工作</h2><p>VSCode 安装 <a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome" target="_blank" rel="noopener">Debugger for Chrome</a></p><h2>配置</h2><p>在 Debug 试图增加下面的配置</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Use IntelliSense to learn about possible attributes.</span><br><span class="line">  // Hover to view descriptions of existing attributes.</span><br><span class="line">  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">  "version": "0.2.0",</span><br><span class="line">  "configurations": [&#123;</span><br><span class="line">    "name": "Launch localhost with sourcemaps",</span><br><span class="line">    "type": "chrome",</span><br><span class="line">    "request": "launch",</span><br><span class="line">    "url": "http://localhost:4200",</span><br><span class="line">    "sourceMaps": true,</span><br><span class="line">    "webRoot": "$&#123;workspaceRoot&#125;",</span><br><span class="line">    "trace": true,</span><br><span class="line">    "userDataDir": "$&#123;workspaceRoot&#125;/.vscode/chrome",</span><br><span class="line">    // "runtimeExecutable": "/opt/google/chrome/google-chrome"</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是 <code>sourceMaps</code> 一定要设成 <code>true</code>, 如果找不到 chrome 的安装路径，可以手动通过 <code>runtimeExecutable</code> 设置，比如我 Manjarro Linux 下的路径为 <code>/opt/google/chrome/google-chrome</code></p><h2>启动</h2><p>一切配置好之后，在 Angular 工程目录通过 <code>ng serve</code> 启动项目，然后就可以打断点，在 Debug 试图通过 <code>Launch localhost with sourcemaps</code> 这个配置开始调试了。</p><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;准备工作&lt;/h2&gt;
&lt;p&gt;VSCode 安装 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="VSCode" scheme="https://gythialy.github.io/tags/VSCode/"/>
    
      <category term="Angular" scheme="https://gythialy.github.io/tags/Angular/"/>
    
      <category term="Chrome" scheme="https://gythialy.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro 安装及配置</title>
    <link href="https://gythialy.github.io/manjaro-config/"/>
    <id>https://gythialy.github.io/manjaro-config/</id>
    <published>2018-06-25T05:14:45.000Z</published>
    <updated>2018-08-16T08:02:00.280Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://manjaro.org/" target="_blank" rel="noopener">Manjaro</a> 是一款基于 Arch Linux、对用户友好、全球排名第 1 的 Linux 发行版。（排名数据源于 <a href="http://distrowatch.com/" target="_blank" rel="noopener">DistroWatch</a>）</p><p>在 Linux 圈，<a href="https://www.archlinux.org/" target="_blank" rel="noopener">Arch</a> 的确是一个异常强大的发行版。它有 3 个无与伦比的优势：</p><ul><li>滚动更新可以使软件保持最新；</li><li><a href="https://aur.archlinux.org/" target="_blank" rel="noopener">AUR</a> 软件仓库有着世界上最齐全的 Linux 软件</li><li>丰富的 <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener">wiki</a> 和活跃的社区让所有问题都可以快速得到满意的答案</li></ul><p>为了解决 ArchLinux 的复杂安装，Manjaro 应运而生！</p><h2>准备</h2><h3>下载镜像</h3><p>可以从 <a href="https://manjaro.org/get-manjaro/" target="_blank" rel="noopener">官方</a> 下载镜像，官方支持 Xfore, KDE, GNOME 三种桌面环境，社区版有更多桌面环境支持。根据个人喜好选择，我对 GNOME 版本比较熟悉，所以下载了 GNOME 版。也可以从 <a href="https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/" target="_blank" rel="noopener">清华大学开源镜像</a> 下载。</p><blockquote><p>注： 清华的镜像比官方镜像稍微旧一些。</p></blockquote><h3>制作 U 盘启动盘</h3><ul><li>WindowsManjaro 官方手册推荐用 <a href="https://rufus.akeo.ie/" target="_blank" rel="noopener">Rufus</a> 制作启动盘，可惜一直没成功，最后使用 <a href="https://sourceforge.net/projects/usbwriter/" target="_blank" rel="noopener">USBwriter</a> 一步到位。</li><li>Linux<code>sudo dd bs=4M if=/path/to/manjaro.iso of=/dev/sd[drive letter] status=progress</code>  [drive letter] 为 U 盘盘符。</li></ul><p><a id="more"></a></p><h3>关闭安全启动</h3><p><a href="https://www.mi.com/mibookpro/" target="_blank" rel="noopener">小米笔记本 Pro 15.6″</a> 需要关闭安全启动才能启动。首先插入 U 盘，然后按开机键，并在开机过程中按 F2，会进入 UEFI 设置：</p><p>安全 -&gt; 设置密码安全 -&gt; 关闭 Secure Boot点击设置密码，但是把 &quot;新密码&quot; 一栏留空，可以实现重置密码</p><h2>安装</h2><p>因为小米这台笔记本一直处于吃灰状态，所以安装非常简单，基本上就是无脑下一步就可以了，直接抹掉所有数据。如果是和 Windows 双系统的话，所以需要在不破坏已有引导文件的情况下来安装，因此选择手动分区。在具体分区时需要将启动盘挂载到 win10 建立的 esp 分区上，挂载点设置为 <code>/boot/efi</code> 标记选择 boot 和 esp 其他的分区和挂载根据自己需要划分。</p><h2>更新源</h2><ul><li><p>执行下面的命令从官方的源列表中对中国源进行测速和设置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -gb testing -c China</span><br></pre></td></tr></table></figure></p></li><li><p>增加 Arch Linux CN 源在 <code>/etc/pacman.conf</code> 文件末尾添加两行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure></p><blockquote><p>注：需要安装 <code>archlinuxcn-keyring</code> 包以导入 GPG key，否则的话 key 验证失败会无法安装的</p></blockquote></li><li><p>更新系统<code>sudo pacman -Syu</code></p></li></ul><h2>常用软件安装</h2><h3>GNU toolchain</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S base-devel</span><br></pre></td></tr></table></figure></p><h3><code>yay</code></h3><p>在之前我们管理软件包都是使用官方为我们提供的 pacman，软件包的来源都是官方。yaourt 实际上也是一个软件包，我们可以把它看成是对 pacman 的包装，它兼容 pacman 的所有操作，最大的不同是我们可以用它方便地安装与管理 AUR 中的包，下面的许多软件包都是在 AUR 库中的，也都是使用 AUR 来安装的。具体使用，可以参考 <a href="https://github.com/Jguer/yay" target="_blank" rel="noopener">这里</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy yay fakeroot</span><br></pre></td></tr></table></figure></p><blockquote><p>注： <code>yay</code> 默认使用的是 <code>pacman</code> 的配置，所以默认控制台是没有颜色的，需要在 <code>/etc/pacman.conf</code> 中的 <code>Color</code> 选项开启， via <a href="https://github.com/Jguer/yay/issues/123" target="_blank" rel="noopener">#123</a></p></blockquote><h3>字体</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay noto-fonts noto-fonts-cjk noto-fonts-emoji wqy-microhei wqy-microhei-lite</span><br></pre></td></tr></table></figure></p><p>文泉驿</p><ul><li>wqy-microhei - 文泉驿微米黑，无衬线形式字体。</li><li>wqy-microhei-lite - 文泉驿微米黑 light 版（笔画更细）</li></ul><h3>输入法</h3><p>目前主流的输入法框架就是 fcitx 和 iBus 两种， iBus bug 稍微多一点。输入法基本上就是 Sogou 和 Rime。 <s>Rime 要配置，我还没找到主题配置的地方，Sogou 基本上就是开箱即用。</s> 使用了一段时间后，还是把输入法改成了 Rime。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S ibus ibus-qt ibus-rime</span><br></pre></td></tr></table></figure></p><p>在 <code>~/.xprofile</code> 添加下面的内容</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=ibus</span><br><span class="line">export XMODIFIERS=@im=ibus</span><br><span class="line">export QT_IM_MODULE=ibus</span><br><span class="line">ibus-daemon -d -x</span><br></pre></td></tr></table></figure></p><blockquote><p>注：Gnome 自带 iBus 的管理界面， 所以你只需要安装的输入法引擎, 并在 Region &amp; Language 中的 “Input Sources” 添加进去。在你添加至少两个输入源后，GNOME 会在托盘中显示输入选择图标。</p></blockquote><h3>zsh</h3><p>zsh 是默认 shell bash 的替代品之一，它的特点是插件多配置方便，兼容 bash 脚本并且支持更强大的高亮与补全。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yaourt zsh powerline-fonts powerline</span><br><span class="line"><span class="comment"># 安装 oh-my-zsh</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注： 也可以使用 <a href="https://fishshell.com/" target="_blank" rel="noopener">fish</a>，但是和 bash 是不兼容的，看个人喜好。</p></blockquote><h3><a href="https://launchpad.net/synapse-project" target="_blank" rel="noopener">Synapse</a></h3><p>Synapse 是类似 macOS Alfred 的应用启动器。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt synapse</span><br></pre></td></tr></table></figure></p><h3>剪贴板</h3><p><a href="https://hluk.github.io/CopyQ/" target="_blank" rel="noopener">CopyQ</a> 是一个剪贴板管理工具，类似 <a href="https://ditto-cp.sourceforge.io/" target="_blank" rel="noopener">Ditto</a>。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt copyq</span><br></pre></td></tr></table></figure></p><h3>微信</h3><p>目前官方没有出过 Linux 版本，Linux 平台只有 Web 版。用三个选择，wine 安装 Windows 版本，Deepin 已经做过一些修改，但是这个版本的字体显示不是很好。还有两个分别是 <code>electronic-wechat</code> 和 <code>wewechat</code>，后两者都是基于 Web 版封装的，<code>wewechat</code> 更彻底一点，三个都可以通过 AUR 安装。使用体验上来说都没办法和 Windows 、macOS 平台相比，聊胜于无吧。</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S electronic-wechat wewechat deepin.com.wechat</span><br></pre></td></tr></table></figure></p><h3>其他</h3><ul><li>配置 SSH</li><li>配置 Git</li><li>配置 gpg</li><li>安装 IDE (Jetbrains ...)</li><li>etc ...</li></ul><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt clion gitahead typora ieaseMusic code ...</span><br></pre></td></tr></table></figure></p><h2>备份</h2><p>简单配置了一下 Timeshift，整体体验远不如 macOS TimeMachine，不过毕竟价格差异在这里，还要什么自行车。</p><h2>小结</h2><p>总的来说， Manjaro 安装方便，有 AUR 加持，安装包非常方便，作为主力开发环境使用了一段时间总体觉得还可以。搭建开发环境来说，基本与 macOS 相当，有些环境需要 sudo，这点不如 Brew，不过稍微配置还说有版本实现的。</p><h2>参考链接</h2><ul><li><a href="https://wiki.manjaro.org/index.php?title=Burn_an_ISO_File#Writing_to_a_USB_Stick_in_Linux" target="_blank" rel="noopener">Writing_to_a_USB_Stick_in_Linux</a></li><li><a href="https://wiki.archlinux.org/index.php/Xiaomi_Mi_Notebook_Air_13.3_(2016)" target="_blank" rel="noopener">Xiaomi Mi Notebook Air 13.3</a></li><li><a href="https://wiki.archlinux.org/index.php/Fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">Fonts</a></li></ul><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://manjaro.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Manjaro&lt;/a&gt; 是一款基于 Arch Linux、对用户友好、全球排名第 1 的 Linux 发行版。（排名数据源于 &lt;a href=&quot;http://distrowatch.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DistroWatch&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;在 Linux 圈，&lt;a href=&quot;https://www.archlinux.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arch&lt;/a&gt; 的确是一个异常强大的发行版。它有 3 个无与伦比的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滚动更新可以使软件保持最新；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://aur.archlinux.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AUR&lt;/a&gt; 软件仓库有着世界上最齐全的 Linux 软件&lt;/li&gt;
&lt;li&gt;丰富的 &lt;a href=&quot;https://wiki.archlinux.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt; 和活跃的社区让所有问题都可以快速得到满意的答案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决 ArchLinux 的复杂安装，Manjaro 应运而生！&lt;/p&gt;
&lt;h2&gt;准备&lt;/h2&gt;
&lt;h3&gt;下载镜像&lt;/h3&gt;
&lt;p&gt;可以从 &lt;a href=&quot;https://manjaro.org/get-manjaro/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方&lt;/a&gt; 下载镜像，官方支持 Xfore, KDE, GNOME 三种桌面环境，社区版有更多桌面环境支持。根据个人喜好选择，我对 GNOME 版本比较熟悉，所以下载了 GNOME 版。也可以从 &lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;清华大学开源镜像&lt;/a&gt; 下载。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注： 清华的镜像比官方镜像稍微旧一些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;制作 U 盘启动盘&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows
Manjaro 官方手册推荐用 &lt;a href=&quot;https://rufus.akeo.ie/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rufus&lt;/a&gt; 制作启动盘，可惜一直没成功，最后使用 &lt;a href=&quot;https://sourceforge.net/projects/usbwriter/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;USBwriter&lt;/a&gt; 一步到位。&lt;/li&gt;
&lt;li&gt;Linux
&lt;code&gt;sudo dd bs=4M if=/path/to/manjaro.iso of=/dev/sd[drive letter] status=progress&lt;/code&gt;  [drive letter] 为 U 盘盘符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Manjaro" scheme="https://gythialy.github.io/tags/Manjaro/"/>
    
      <category term="Linux" scheme="https://gythialy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Clion WSL 工具链配置</title>
    <link href="https://gythialy.github.io/clion-wsl/"/>
    <id>https://gythialy.github.io/clion-wsl/</id>
    <published>2018-06-24T12:02:38.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h2>安装 WSL</h2><p>以管理员权限运行 owershell 并执行下面的指令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure></p><p>在 <a href="https://www.microsoft.com/zh-cn/p/ubuntu/9nblggh4msv6?rtc=1" target="_blank" rel="noopener">Microsoft Store</a> 中安装 Ubuntu。</p><blockquote><p>目前 Windows 支持多种 Linux 发行版，但 Ubuntu 作为使用门槛最低的版本，这里以此为例。</p></blockquote><h2>与 Windows 共享配置</h2><p>通过软链接 Windows 的用户到 WSL，这样就可以共享一些软件的配置信息，比如 git, ssh 等。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除原有用户目录</span></span><br><span class="line">sudo rm -rf /home/goreng</span><br><span class="line"><span class="comment"># 链接 Windows 用户目录到 WSL 中</span></span><br><span class="line">sudo ln -sf /mnt/c/User/&lt;windows user name&gt; /home/goreng</span><br><span class="line"><span class="comment"># 更改访问租信息</span></span><br><span class="line">sudo chown -R goreng:goreng /home/goreng</span><br></pre></td></tr></table></figure></p><p><a id="more"></a></p><blockquote><p><code>goreng</code> 为 WSL 用户名</p></blockquote><h2>修改 Ubuntu 源</h2><p>修改 Ubuntu 默认源为镜像配置并关闭 <code>deb-src</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i -e <span class="string">'s%http://archive.ubuntu.com/ubuntu%mirror://mirrors.ubuntu.com/mirrors.txt%'</span> -e <span class="string">'s/^deb-src/#deb-src/'</span> /etc/apt/sources.list</span><br><span class="line">sudo apt-get upate &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p><h2>安装 Clion 依赖</h2><p>Jetbrains 官方给出一键安装的脚本，基本上就是安装基本的开发包，并配置了 SSH Server 用于远程调试</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/JetBrains/clion-wsl/master/ubuntu_setup_env.sh &amp;&amp; bash ubuntu_setup_env.sh</span><br></pre></td></tr></table></figure></p><blockquote><p>注：此处脚本执行完会打印 SSH 连接信息，后面会用到</p></blockquote><h2>安装常用开发组件</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git zsh python-dev python-pip fonts-powerline gnupg2 qtbase5-dev</span><br></pre></td></tr></table></figure></p><h2>配置 zsh</h2><h3>安装 oh-my-zsh</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure></p><h3>安装 <a href="https://github.com/b-ryan/powerline-shell" target="_blank" rel="noopener">powerline-shell</a></h3><ul><li>安装 <code>pip install powerline-shell</code></li><li>添加到 <code>~/.zshrc</code> 中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">powerline_precmd</span></span>() &#123;</span><br><span class="line">    PS1=<span class="string">"<span class="variable">$(powerline-shell --shell zsh $?)</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">install_powerline_precmd</span></span>() &#123;</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;precmd_functions[@]&#125;</span>"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$s</span>"</span> = <span class="string">"powerline_precmd"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">precmd_functions+=(powerline_precmd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$TERM</span>"</span> != <span class="string">"linux"</span> ]; <span class="keyword">then</span></span><br><span class="line">    install_powerline_precmd</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ul><h2>编译 <a href="https://www.boost.org/" target="_blank" rel="noopener">boost</a></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --quiet -O boost_1_67_0.tar.gz https://dl.bintray.com/boostorg/release/1.67.0/<span class="built_in">source</span>/boost_1_67_0.tar.gz</span><br><span class="line">tar xf boost_1_67_0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> boost_1_67_0</span><br><span class="line">./bootstrap.sh</span><br><span class="line">./b2 link=static install</span><br></pre></td></tr></table></figure></p><h2>编译 <a href="https://cmake.org/" target="_blank" rel="noopener">cmake</a></h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget --quiet -O cmake-3.11.4.tar.gz  https://cmake.org/files/v3.11/cmake-3.11.4.tar.gz</span><br><span class="line">tar xf cmake-3.11.4.tar.gz</span><br><span class="line">cd cmake-3.11.4</span><br><span class="line">./bootstrap</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><blockquote><p>注：由于 Ubuntu 源中的 cmake 版本比较低，对 boost 支持不好，所以手动编译官方最新的 release 版</p></blockquote><h2>配置 Clion</h2><p>由于 WSL 是文件名大小写敏感，所以需要修改 Clion 的配置。在 Help -&gt; “Edit Custom Properties…” 中添加  <code>idea.case.sensitive.fs=true</code> 然后重启并重建索引。 (File -&gt; “Invalidate Caches and Restart”)</p><h2>小结</h2><p>对于 Windows 平台来说，有了 WSL 之后多了一个选择，但是 WSL 的稳定性还是有挺大问题，比如在我做了这一大堆配置之后，WSL 起不起来了。</p><p>Clion 对 WSL 的支持也是处于比较初级的阶段，gdb 调试的时候，对 C++ STL value 的显示也不友好。via <a href="https://youtrack.jetbrains.com/issue/CPP-6828" target="_blank" rel="noopener">GDB pretty printers don't work for std::string and std::list with GCC-5 and higher</a></p><p>综上所述，在 Windows 平台还是用宇宙最强 IDE Visual Studio 吧。</p><h2>参考链接</h2><ul><li><a href="https://blog.jetbrains.com/clion/2018/01/clion-and-linux-toolchain-on-windows-are-now-friends/" target="_blank" rel="noopener">CLion and Linux toolchain on Windows are now friends!</a></li><li><a href="https://www.boost.org/doc/libs/1_67_0/more/getting_started/unix-variants.html" target="_blank" rel="noopener">Getting Started on Unix Variants</a></li><li><a href="https://cmake.org/install/" target="_blank" rel="noopener">Installing CMake</a></li></ul><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;安装 WSL&lt;/h2&gt;
&lt;p&gt;以管理员权限运行 owershell 并执行下面的指令
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&quot;https://www.microsoft.com/zh-cn/p/ubuntu/9nblggh4msv6?rtc=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Microsoft Store&lt;/a&gt; 中安装 Ubuntu。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前 Windows 支持多种 Linux 发行版，但 Ubuntu 作为使用门槛最低的版本，这里以此为例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;与 Windows 共享配置&lt;/h2&gt;
&lt;p&gt;通过软链接 Windows 的用户到 WSL，这样就可以共享一些软件的配置信息，比如 git, ssh 等。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除原有用户目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rm -rf /home/goreng&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 链接 Windows 用户目录到 WSL 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -sf /mnt/c/User/&amp;lt;windows user name&amp;gt; /home/goreng&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 更改访问租信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo chown -R goreng:goreng /home/goreng&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Clion" scheme="https://gythialy.github.io/tags/Clion/"/>
    
      <category term="WSL" scheme="https://gythialy.github.io/tags/WSL/"/>
    
      <category term="Windows Subsystem for Linux" scheme="https://gythialy.github.io/tags/Windows-Subsystem-for-Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose 编排 DevOps 工具</title>
    <link href="https://gythialy.github.io/docker-devops-kits/"/>
    <id>https://gythialy.github.io/docker-devops-kits/</id>
    <published>2018-02-09T02:39:15.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h2>介绍</h2><p>在 <a href="/Docker-nginx-reverse-proxy/" title="Docker nginx 反向代理设置">Docker nginx 反向代理设置</a> 介绍了通过 <a href="https://nginx.org/en/" target="_blank" rel="noopener">nginx</a> 反向代理关联容器。此为真实的使用场景。通过 <a href="https://github.com/go-gitea/gitea" target="_blank" rel="noopener">Gitea</a> 作为代码管理工具；<a href="https://github.com/kanboard/kanboard" target="_blank" rel="noopener">Kanboard</a> 作为任务管理；<a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a> 作为 CI 工具。这样的组合比较适合小型团队使用，相比起 <a href="https://gitlab.com/" target="_blank" rel="noopener">GitLab</a> 这种巨无霸来说，部署简单，使用简单。</p><h2>准备</h2><ul><li><p>安装 Docker</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL get.docker.com -o get-docker.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh get-docker.sh</span></span><br><span class="line"></span><br><span class="line">&lt;output truncated&gt;</span><br><span class="line"></span><br><span class="line">If you would like to use Docker as a non-root user, you should now consider</span><br><span class="line">adding your user to the "docker" group with something like:</span><br><span class="line"></span><br><span class="line">sudo usermod -aG docker your-user</span><br><span class="line"></span><br><span class="line">Remember to log out and back in for this to take effect!</span><br><span class="line"></span><br><span class="line">WARNING: Adding a user to the "docker" group grants the ability to run</span><br><span class="line">        containers which can be used to obtain root privileges on the</span><br><span class="line">        docker host.</span><br><span class="line">        Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</span><br><span class="line">        for more information.</span><br></pre></td></tr></table></figure></p></li><li><p>安装 Docker Compose</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br></pre></td></tr></table></figure></p></li></ul><blockquote><p>注：Docker 以及 Docker Compose 的安装，官方文档讲得非常清晰，在此不再赘述。</p></blockquote><p><a id="more"></a></p><h2><code>docker-compose.yml</code> 文件</h2><p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.5"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mysql:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"3306:3306"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=/run/secrets/db_root_password</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./mysql/conf.d</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./mysql/data</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">      <span class="comment"># - ./mysql/conf.d:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="comment"># - ./mysql/data:/var/lib/mysql</span></span><br><span class="line"><span class="attr">    secrets:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db_root_password</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  gitea:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">gitea/gitea:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">gitea</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"10080:3000"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"10022:22"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">VIRTUAL_HOST=git.vking.io</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">VIRTUAL_PORT=3000</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">GITEA_CUSTOM=/etc/gitea</span></span><br><span class="line"><span class="attr">    depends_on:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./gitea</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./gitea/custom</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/etc/gitea</span></span><br><span class="line">      <span class="comment"># - ./gitea:/data</span></span><br><span class="line">      <span class="comment"># - ./gitea/custom:/etc/gitea</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  task:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">kanboard/kanboard:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">kanboard</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8888:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">VIRTUAL_HOST=task.vking.io</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">VIRTUAL_PORT=80</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./kanboard/data</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/var/www/app/data</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./kanboard/plugins</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/var/www/app/plugins</span></span><br><span class="line">      <span class="comment"># - ./kanboard/data:/var/www/app/data</span></span><br><span class="line">      <span class="comment"># - ./kanboard/plugins:/var/www/app/plugins</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  jenkins:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">jenkins/jenkins:lts</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8081:8080"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"50000:5000"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">VIRTUAL_HOST=jenkins.vking.io</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">VIRTUAL_PORT=8080</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">        source:</span> <span class="string">./jenkins/data</span></span><br><span class="line"><span class="attr">        target:</span> <span class="string">/var/jenkins_home</span></span><br><span class="line">      <span class="comment"># - ./jenkins/data:/var/jenkins_home</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  nginx:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">jwilder/nginx-proxy:alpine</span></span><br><span class="line"><span class="attr">      container_name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="attr">      depends_on:</span> </span><br><span class="line"><span class="bullet">        -</span> <span class="string">gitea</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">task</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">      networks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">          source:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">/tmp/docker.sock</span></span><br><span class="line">        <span class="comment"># - /var/run/docker.sock:/tmp/docker.sock</span></span><br><span class="line"><span class="attr">      restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line"><span class="attr">  db_root_password:</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">./mysql/my_secret.txt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  devops:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">devops-network</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注: 通过 volumes bind 方式挂载的外部文件/目录，如果不存在的话，不会自动创建。</p></blockquote><h2>使用</h2><ul><li>MySQL 的管理员密码，通过 <code>mysql/my_my_secret.txt</code> 设置，构建容器的时候会自动加载并设置。</li><li>不同 services 管理的域名，通过环境变量设置 <code>VIRTUAL_HOST=域名；VIRTUAL_PORT=端口</code></li><li>创建镜像并执行 <code>docker-compose up -d</code></li><li>删除容器及 <code>volumn</code> 数据  <code>docker-compose down -v</code></li></ul><h2>后记</h2><p>因为通过反向代理隐藏了暴露端口的细节，如果没有外部注册的域名的话，还需要通过 <a href="http://www.thekelleys.org.uk/dnsmasq/doc.html" target="_blank" rel="noopener">Dnsmasq</a> 进行内部域名解析。</p><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&quot;/Docker-nginx-reverse-proxy/&quot; title=&quot;Docker nginx 反向代理设置&quot;&gt;Docker nginx 反向代理设置&lt;/a&gt; 介绍了通过 &lt;a href=&quot;https://nginx.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nginx&lt;/a&gt; 反向代理关联容器。此为真实的使用场景。通过 &lt;a href=&quot;https://github.com/go-gitea/gitea&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gitea&lt;/a&gt; 作为代码管理工具；&lt;a href=&quot;https://github.com/kanboard/kanboard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kanboard&lt;/a&gt; 作为任务管理；&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jenkins&lt;/a&gt; 作为 CI 工具。这样的组合比较适合小型团队使用，相比起 &lt;a href=&quot;https://gitlab.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitLab&lt;/a&gt; 这种巨无霸来说，部署简单，使用简单。&lt;/p&gt;
&lt;h2&gt;准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装 Docker&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; curl -fsSL get.docker.com -o get-docker.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo sh get-docker.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;output truncated&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you would like to use Docker as a non-root user, you should now consider&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adding your user to the &quot;docker&quot; group with something like:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo usermod -aG docker your-user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Remember to log out and back in for this to take effect!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WARNING: Adding a user to the &quot;docker&quot; group grants the ability to run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        containers which can be used to obtain root privileges on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        docker host.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for more information.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 Docker Compose&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/docker-compose&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo chmod +x /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/docker-compose&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; docker-compose --version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：Docker 以及 Docker Compose 的安装，官方文档讲得非常清晰，在此不再赘述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Docker" scheme="https://gythialy.github.io/tags/Docker/"/>
    
      <category term="nginx" scheme="https://gythialy.github.io/tags/nginx/"/>
    
      <category term="Docker Compose" scheme="https://gythialy.github.io/tags/Docker-Compose/"/>
    
      <category term="Git" scheme="https://gythialy.github.io/tags/Git/"/>
    
      <category term="Gitea" scheme="https://gythialy.github.io/tags/Gitea/"/>
    
      <category term="DevOps" scheme="https://gythialy.github.io/tags/DevOps/"/>
    
      <category term="Jenkins" scheme="https://gythialy.github.io/tags/Jenkins/"/>
    
      <category term="Kanboard" scheme="https://gythialy.github.io/tags/Kanboard/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 通过数据库生成 Nutz 实体类</title>
    <link href="https://gythialy.github.io/idea-generate-nutz-entity-from-database/"/>
    <id>https://gythialy.github.io/idea-generate-nutz-entity-from-database/</id>
    <published>2018-02-07T07:41:49.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h2>缘起</h2><p><a href="https://github.com/nutzam/nutz" target="_blank" rel="noopener">Nutz</a> 是一套开源的 Web Framework(Mvc/Ioc/Aop/Dao/Json)，其中 Dao 模块是针对 JDBC 的薄封装，事务模板，无缓存。在数据库已经设计好之后，手动写对应的 Entity 的话，是个无比痛苦且无意义的事情。下面就通过 IDEA 自带的 DataGrip 基础上根据数据库信息一键生成 Entity</p><h2>插件</h2><ul><li><p>在 <code>Scratches</code> 视图下的 <code>Extensions/schema</code> 新建一个文件，命名任意，比如 <code>Generate nutz POJOs.groovy</code></p><p><img src="/uploads/Snipaste_2018-02-07_15-53-39.png" alt="Scratches"></p></li></ul><p><a id="more"></a></p><ul><li><p>把下面的代码复制到刚才创建的文件中</p><p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.ObjectKind</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Available context bindings:</span></span><br><span class="line"><span class="comment">*   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment">*   PROJECT     project</span></span><br><span class="line"><span class="comment">*   FILES       files helper</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 包名，也可以直接修改生成的 Java 文件 */</span></span><br><span class="line">packageName = <span class="string">"com.sample;"</span></span><br><span class="line">typeMapping = [</span><br><span class="line">        (<span class="regexp">~/(?i)int/</span>)                      : <span class="string">"long"</span>,</span><br><span class="line">        (<span class="regexp">~/(?i)float|double|decimal|real/</span>): <span class="string">"double"</span>,</span><br><span class="line">        (<span class="regexp">~/(?i)datetime|timestamp/</span>)       : <span class="string">"java.sql.Timestamp"</span>,</span><br><span class="line">        (<span class="regexp">~/(?i)date/</span>)                     : <span class="string">"java.sql.Date"</span>,</span><br><span class="line">        (<span class="regexp">~/(?i)time/</span>)                     : <span class="string">"java.sql.Time"</span>,</span><br><span class="line">        (<span class="regexp">~/(?i)/</span>)                         : <span class="string">"String"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it <span class="keyword">instanceof</span> DasTable &amp;&amp; it.getKind() == ObjectKind.TABLE &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> generate(table, dir) &#123;</span><br><span class="line">    <span class="keyword">def</span> className = javaName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">def</span> fields = calcFields(table)</span><br><span class="line">    <span class="keyword">new</span> File(dir, className + <span class="string">".java"</span>).withPrintWriter &#123; out -&gt; generate(out, table, className, fields) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> generate(out, table, className, fields) &#123;</span><br><span class="line">    out.println <span class="string">"package $packageName"</span></span><br><span class="line">    <span class="comment">/* 可在此添加需要导入的包名，也可通过 IDE 批量修改生成的 Java 文件 */</span></span><br><span class="line">    out.println <span class="string">""</span></span><br><span class="line">    out.println <span class="string">""</span></span><br><span class="line">    out.println <span class="string">"@Table(\"$&#123;table.getName()&#125;\")"</span></span><br><span class="line">    out.println <span class="string">"public class $className &#123;"</span></span><br><span class="line">    out.println <span class="string">""</span></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        <span class="keyword">if</span> (it.annos != <span class="string">""</span>) out.println <span class="string">"  $&#123;it.annos&#125;"</span></span><br><span class="line">        out.println <span class="string">"  @Column(\"$&#123;it.col&#125;\")"</span></span><br><span class="line">        out.println <span class="string">"  private $&#123;it.type&#125; $&#123;it.name&#125;;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    out.println <span class="string">""</span></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        out.println <span class="string">""</span></span><br><span class="line">        out.println <span class="string">"  public $&#123;it.type&#125; get$&#123;it.name.capitalize()&#125;() &#123;"</span></span><br><span class="line">        out.println <span class="string">"    return $&#123;it.name&#125;;"</span></span><br><span class="line">        out.println <span class="string">"  &#125;"</span></span><br><span class="line">        out.println <span class="string">""</span></span><br><span class="line">        out.println <span class="string">"  public void set$&#123;it.name.capitalize()&#125;($&#123;it.type&#125; $&#123;it.name&#125;) &#123;"</span></span><br><span class="line">        out.println <span class="string">"    this.$&#123;it.name&#125; = $&#123;it.name&#125;;"</span></span><br><span class="line">        out.println <span class="string">"  &#125;"</span></span><br><span class="line">        out.println <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    out.println <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> calcFields(table) &#123;</span><br><span class="line">    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;</span><br><span class="line">        <span class="keyword">def</span> spec = Case.LOWER.apply(col.getDataType().getSpecification())</span><br><span class="line">        <span class="keyword">def</span> typeStr = typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value</span><br><span class="line">        fields += [[</span><br><span class="line">                        <span class="string">name :</span> javaName(col.getName(), <span class="literal">false</span>),</span><br><span class="line">                        <span class="string">type :</span> typeStr,</span><br><span class="line">                        <span class="string">col  :</span> col.getName(),</span><br><span class="line"><span class="symbol">                        annos:</span> <span class="string">""</span>]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> javaName(str, capitalize) &#123;</span><br><span class="line">    <span class="keyword">def</span> s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(<span class="regexp">/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/</span>, <span class="string">"_"</span>)</span><br><span class="line">    capitalize || s.length() == <span class="number">1</span> ? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>生成 Entity</p></li></ul><p><img src="/uploads/Snipaste_2018-02-07_15-53-09.png" alt="Generate Entity"></p><blockquote><p>注：首先需要创建数据库连接，选中要生成的 Entity 的表，右键选择 <code>Generate nutz POJOs.groovy</code> 即可。</p></blockquote><h2>后记</h2><p>代码在 IDEA 自带的 <code>Generate POJOs.groovy</code> 基础上修改而成，如果需要其他规范的实体类，比如 <a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html" target="_blank" rel="noopener">JPA</a> 只要稍作修改即可。</p><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;缘起&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nutzam/nutz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nutz&lt;/a&gt; 是一套开源的 Web Framework(Mvc/Ioc/Aop/Dao/Json)，其中 Dao 模块是针对 JDBC 的薄封装，事务模板，无缓存。在数据库已经设计好之后，手动写对应的 Entity 的话，是个无比痛苦且无意义的事情。下面就通过 IDEA 自带的 DataGrip 基础上根据数据库信息一键生成 Entity&lt;/p&gt;
&lt;h2&gt;插件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;Scratches&lt;/code&gt; 视图下的 &lt;code&gt;Extensions/schema&lt;/code&gt; 新建一个文件，命名任意，比如 &lt;code&gt;Generate nutz POJOs.groovy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Snipaste_2018-02-07_15-53-39.png&quot; alt=&quot;Scratches&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://gythialy.github.io/categories/Programming/"/>
    
    
      <category term="IDEA" scheme="https://gythialy.github.io/tags/IDEA/"/>
    
      <category term="Groovy" scheme="https://gythialy.github.io/tags/Groovy/"/>
    
      <category term="Nutz" scheme="https://gythialy.github.io/tags/Nutz/"/>
    
  </entry>
  
  <entry>
    <title>Scoop 安装使用</title>
    <link href="https://gythialy.github.io/scoop-config/"/>
    <id>https://gythialy.github.io/scoop-config/</id>
    <published>2018-02-07T06:58:48.000Z</published>
    <updated>2018-08-16T08:02:00.280Z</updated>
    
    <content type="html"><![CDATA[<h2>介绍</h2><p><a href="https://scoop.sh/" target="_blank" rel="noopener">Scoop</a> 是 Windows 上的命令行安装程序</p><p>特点如下：</p><ul><li><strong>大多数</strong>程序安装不需要管理员权限</li><li>自动设置环境变量</li><li>命令行操作，类似 macOS 下的 HomeBrew</li><li>常见开发环境都可以轻松搞定</li></ul><h2>安装</h2><ul><li><p>以管理员账号启动 Powershell，输入以下命令</p><p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">psversiontable.psversion.major <span class="comment"># should be &gt;= 3</span></span><br><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned -scope currentuser</span><br><span class="line"><span class="comment"># 自定义安装路径(可选)</span></span><br><span class="line">[environment]::setEnvironmentVariable(<span class="string">'SCOOP'</span>,<span class="string">'D:\Scoop'</span>,<span class="string">'User'</span>)</span><br><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">'D:\Scoop'</span></span><br><span class="line">iex (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">'https://get.scoop.sh'</span>)</span><br></pre></td></tr></table></figure></p><p>如果没报错，就表示安装成功</p></li><li><p>添加官网扩展支持</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop bucket add versions</span><br></pre></td></tr></table></figure></p></li></ul><p><a id="more"></a></p><h2>使用</h2><h3>支持命令</h3><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Usage: scoop &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful commands are:</span><br><span class="line"></span><br><span class="line">alias       Manage scoop aliases</span><br><span class="line">bucket      Manage Scoop buckets</span><br><span class="line">cache       Show or clear the download cache</span><br><span class="line">checkup     Check for potential problems</span><br><span class="line">cleanup     Cleanup apps by removing old versions</span><br><span class="line">config      Get or set configuration values</span><br><span class="line">create      Create a custom app manifest</span><br><span class="line">depends     List dependencies for an app</span><br><span class="line">export      Exports (an importable) list of installed apps</span><br><span class="line">help        Show help for a command</span><br><span class="line">home        Opens the app homepage</span><br><span class="line">install     Install apps</span><br><span class="line">list        List installed apps</span><br><span class="line">reset       Reset an app to resolve conflicts</span><br><span class="line">search      Search available apps</span><br><span class="line">status      Show status and check for new app versions</span><br><span class="line">uninstall   Uninstall an app</span><br><span class="line">update      Update apps, or Scoop itself</span><br><span class="line">virustotal  Look for app's hash on virustotal.com</span><br><span class="line">which       Locate a shim/executable (similar to 'which' on Linux)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Type 'scoop help &lt;command&gt;' to get help for a specific command.</span><br></pre></td></tr></table></figure></p><h3>基本命令</h3><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找软件</span></span><br><span class="line">scoop search sublime-text</span><br><span class="line"><span class="meta">#</span><span class="bash">全局安装</span></span><br><span class="line">sudo scoop install oraclejdk python -g </span><br><span class="line"><span class="meta">#</span><span class="bash">一般安装</span></span><br><span class="line">scoop install sublime-text </span><br><span class="line"><span class="meta">#</span><span class="bash">更新</span></span><br><span class="line">scoop update sublime-text </span><br><span class="line"><span class="meta">#</span><span class="bash">卸载</span></span><br><span class="line">scoop uninstall sublime-text</span><br></pre></td></tr></table></figure></p><h3>导出安装软件列表</h3><p><code>scoop.cmd export &gt; app_list.txt</code></p><h3>更新所有安装软件</h3><p><code>scoop update * &amp;&amp; scoop cleanup *</code></p><h3>Python 版本切换</h3><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scoop install python27 python</span><br><span class="line">python --version # -&gt; Python 3.6.2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> switch to python 2.7.x</span></span><br><span class="line">scoop reset python27</span><br><span class="line">python --version # -&gt; Python 2.7.13</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> switch back (to 3.x)</span></span><br><span class="line">scoop reset python</span><br><span class="line">python --version # -&gt; Python 3.6.2</span><br></pre></td></tr></table></figure></p><blockquote><p>注：Ruby 版本切换类似，都是通过 <code>scoop reset</code> 切换</p></blockquote><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://scoop.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Scoop&lt;/a&gt; 是 Windows 上的命令行安装程序&lt;/p&gt;
&lt;p&gt;特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大多数&lt;/strong&gt;程序安装不需要管理员权限&lt;/li&gt;
&lt;li&gt;自动设置环境变量&lt;/li&gt;
&lt;li&gt;命令行操作，类似 macOS 下的 HomeBrew&lt;/li&gt;
&lt;li&gt;常见开发环境都可以轻松搞定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以管理员账号启动 Powershell，输入以下命令&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;psversiontable.psversion.major &lt;span class=&quot;comment&quot;&gt;# should be &amp;gt;= 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set-executionpolicy&lt;/span&gt; remotesigned -scope currentuser&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 自定义安装路径(可选)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[environment]::setEnvironmentVariable(&lt;span class=&quot;string&quot;&gt;&#39;SCOOP&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;D:\Scoop&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;User&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$env:SCOOP&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;D:\Scoop&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex (&lt;span class=&quot;built_in&quot;&gt;new-object&lt;/span&gt; net.webclient).downloadstring(&lt;span class=&quot;string&quot;&gt;&#39;https://get.scoop.sh&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没报错，就表示安装成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加官网扩展支持&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scoop bucket add extras&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scoop bucket add versions&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Scoop" scheme="https://gythialy.github.io/tags/Scoop/"/>
    
  </entry>
  
  <entry>
    <title>eclipse 配置及插件</title>
    <link href="https://gythialy.github.io/eclipse-plugin/"/>
    <id>https://gythialy.github.io/eclipse-plugin/</id>
    <published>2018-02-07T01:30:12.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我现在基本上转到 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">Jetbrains IDEA</a> 了，办公室有些小朋友还是坚守 <a href="http://www.eclipse.org/downloads/eclipse-packages/" target="_blank" rel="noopener">eclipse</a>，简单整理下常用插件和配置。</p><h3>插件</h3><table><thead><tr><th>名称</th><th>备注</th><th style="text-align:center">安装</th></tr></thead><tbody><tr><td><a href="https://projects.eclipse.org/projects/tools.buildship" target="_blank" rel="noopener">Buildship</a></td><td>Eclipse Gradle 插件</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2306961" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr><tr><td><a href="https://www.genuitec.com/products/devstyle/" target="_blank" rel="noopener">Darkest Dark Theme w/DevStyle</a></td><td>黑色主题</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3274405" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr><tr><td><a href="https://checkstyle.github.io/eclipse-cs/" target="_blank" rel="noopener">Checkstyle</a></td><td>代码风格检查</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=150" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr><tr><td><a href="https://ecd-plugin.github.io/ecd/" target="_blank" rel="noopener">Enhanced Class Decompiler</a></td><td>反编译插件，集成 JD, Jad, FernFlower, CFR, Procyon seamlessly with Eclips</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3644319" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr><tr><td><a href="https://marketplace.eclipse.org/content/java-source-attacher" target="_blank" rel="noopener">Java Source Attacher</a></td><td>下载 jar 包代码包并关联</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=84997" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr><tr><td><a href="https://github.com/JetBrains/kotlin-eclipse" target="_blank" rel="noopener">Kotlin</a></td><td>Kotlin 语言支持</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2257536" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr><tr><td><a href="https://sonarlint.org/eclipse/" target="_blank" rel="noopener">SonarLint for Eclipse</a></td><td>代码静态检查</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2568658" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr><tr><td><a href="https://github.com/spotbugs/spotbugs" target="_blank" rel="noopener">SpotBugs</a></td><td>代码静态检查</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3519199" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr><tr><td><a href="http://testng.org/doc/eclipse.html" target="_blank" rel="noopener">TestNG</a></td><td>测试框架</td><td style="text-align:center"><a href="http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=1549" title="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client" target="_blank" rel="noopener"><img src="https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png" alt="Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client"></a></td></tr></tbody></table><p><a id="more"></a></p><blockquote><p>注： 如果安装了 <a href="https://www.eclipse.org/mpc/" target="_blank" rel="noopener">Marketplace Client</a> 可直接导入<a href="/uploads/eclipse-jee.p2f">配置</a>而无需手动添加。具体步骤为：File-&gt;Import/Install/Install Software Items from File，然后选中配置文件即可。</p></blockquote><h3>配置</h3><ul><li><p>智能提示</p><p><code>Java/Content Assint/Auto Activation/Auto activation triggers for java</code> 为 <code>.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ(, @</code></p><p><img src="/uploads/Snipaste_2018-02-07_14-12-26.png" alt=""></p></li><li><p>字体设置</p><p><code>General/Appearance/Colors and Fonts</code>  设置字体</p><p><img src="/uploads/Snipaste_2018-02-07_14-19-06.png" alt=""></p></li><li><p>文件编码</p><p>文件编码默认为 GBK，可通过 <code>General/Workspace/Text file encoding/Other</code> 选中 <code>UTF-8</code> 修改</p><p><img src="/uploads/Snipaste_2018-02-07_14-45-09.png" alt=""></p></li></ul><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我现在基本上转到 &lt;a href=&quot;https://www.jetbrains.com/idea/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jetbrains IDEA&lt;/a&gt; 了，办公室有些小朋友还是坚守 &lt;a href=&quot;http://www.eclipse.org/downloads/eclipse-packages/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;eclipse&lt;/a&gt;，简单整理下常用插件和配置。&lt;/p&gt;
&lt;h3&gt;插件&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;安装&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/tools.buildship&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Buildship&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Eclipse Gradle 插件&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2306961&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.genuitec.com/products/devstyle/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Darkest Dark Theme w/DevStyle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;黑色主题&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3274405&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://checkstyle.github.io/eclipse-cs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Checkstyle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代码风格检查&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=150&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://ecd-plugin.github.io/ecd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Enhanced Class Decompiler&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;反编译插件，集成 JD, Jad, FernFlower, CFR, Procyon seamlessly with Eclips&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3644319&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://marketplace.eclipse.org/content/java-source-attacher&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java Source Attacher&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;下载 jar 包代码包并关联&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=84997&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/JetBrains/kotlin-eclipse&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kotlin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kotlin 语言支持&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2257536&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://sonarlint.org/eclipse/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SonarLint for Eclipse&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代码静态检查&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2568658&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/spotbugs/spotbugs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SpotBugs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代码静态检查&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3519199&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://testng.org/doc/eclipse.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TestNG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;测试框架&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=1549&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="IDE" scheme="https://gythialy.github.io/tags/IDE/"/>
    
      <category term="Plugin" scheme="https://gythialy.github.io/tags/Plugin/"/>
    
      <category term="eclipse" scheme="https://gythialy.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 插件</title>
    <link href="https://gythialy.github.io/IntelliJ-IDEA-plugins/"/>
    <id>https://gythialy.github.io/IntelliJ-IDEA-plugins/</id>
    <published>2018-02-02T07:18:01.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h3>语言相关</h3><ul><li><a href="https://plugins.jetbrains.com/plugin/6954-kotlin" target="_blank" rel="noopener">Kotlin</a> Jetbrains 官方 Kotlin 插件</li><li><a href="https://plugins.jetbrains.com/plugin/5047-go-language-golang-org-support-plugin" target="_blank" rel="noopener">Go</a> Jetbrains 官方 <a href="https://golang.org/" target="_blank" rel="noopener">Golang</a>  插件</li></ul><h3>工具类</h3><ul><li><a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x" target="_blank" rel="noopener">Key promoter X</a> 快捷键辅助工具</li><li><a href="https://plugins.jetbrains.com/plugin/7495--ignore" target="_blank" rel="noopener">.ignore</a> Git ignore 高亮等</li><li><a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea" target="_blank" rel="noopener">CheckStyle-IDEA</a> 代码规范检查</li><li><a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea" target="_blank" rel="noopener">FindBugs-IDEA</a>  潜在 Bug 检查</li><li><a href="https://plugins.jetbrains.com/plugin/4509-statistic" target="_blank" rel="noopener">Statistic</a> 代码统计</li></ul><h3>代码生成</h3><ul><li><a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation" target="_blank" rel="noopener">String Manipulation</a> 驼峰式命名和下划线命名交替变化</li><li><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper" target="_blank" rel="noopener">Maven Helper</a> Maven 辅助工具</li><li><a href="https://plugins.jetbrains.com/plugin/9960-jsontokotlinclass" target="_blank" rel="noopener">JsonToKotlinClass</a> 转换 Json 字符串 为 Kotlin 类</li><li><a href="https://plugins.jetbrains.com/plugin/7654-gsonformat" target="_blank" rel="noopener">GsonFormat</a> 把 Json 字符串为 Java 类</li><li><a href="https://plugins.jetbrains.com/plugin/10102-ok-gradle-" target="_blank" rel="noopener">OK, Gradle!</a> Gradle 辅助工具</li><li><a href="https://plugins.jetbrains.com/plugin/7937-gradle-dependencies-formatter" target="_blank" rel="noopener">Gradle Dependencies Formatter</a> 转换 Maven 依赖为 Gradle 语法等</li></ul><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;语言相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plugins.jetbrains.com/plugin/6954-kotlin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kotlin&lt;/a&gt; Jetbrains 官方 Kot
      
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Jetbrains" scheme="https://gythialy.github.io/tags/Jetbrains/"/>
    
      <category term="IDEA" scheme="https://gythialy.github.io/tags/IDEA/"/>
    
      <category term="IDE" scheme="https://gythialy.github.io/tags/IDE/"/>
    
      <category term="Plugin" scheme="https://gythialy.github.io/tags/Plugin/"/>
    
  </entry>
  
  <entry>
    <title>Docker Java 应用镜像</title>
    <link href="https://gythialy.github.io/Docker-java-app-container/"/>
    <id>https://gythialy.github.io/Docker-java-app-container/</id>
    <published>2018-02-01T08:36:34.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<p>最近一个项目中由于使用了不同的版本的 JDK 导致兼容问题，故把不同的应用通过 Docker 分别包装了一下，为了减少镜像大小，选用基于 [<a href="http://alpinelinux.org/" target="_blank" rel="noopener">AlpineLinux</a>] 的<a href="https://github.com/anapsix/docker-alpine-java" target="_blank" rel="noopener">镜像</a>作为基础镜像。</p><p>主要完成了下面几件事情：</p><ul><li>设置时区为北京时间</li><li>添加 <code>docker-entrypoint.sh</code>  做基础的环境变量检查（可选）</li><li>配置 <code>VOLUME</code>，方便通过挂载不同的目录复用</li><li>启动 Java 程序</li></ul><p><a id="more"></a></p><h3>构建镜像</h3><p>新建文件夹，名字任务，包含下面两个文件</p><ul><li><p><code>Dockerfile</code></p><p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> anapsix/alpine-java</span><br><span class="line"><span class="keyword">LABEL</span> maintainer "gythialy@outlook.com"</span><br><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class="line">ENV TZ=Asia/Shanghai \</span><br><span class="line">    PATH=/usr/local/bin/:$PATH </span><br><span class="line">RUN chmod +x /usr/local/bin/docker-entrypoint.sh \</span><br><span class="line">    &amp;&amp; ln -s /usr/local/bin/docker-entrypoint.sh /entrypoint.sh \</span><br><span class="line">    &amp;&amp; apk add --no-cache tzdata \</span><br><span class="line">    &amp;&amp; rm -rf /var/cache/apk/* </span><br><span class="line">ENTRYPOINT ["docker-entrypoint.sh"]</span><br><span class="line">VOLUME [ "/opt/app" ]</span><br><span class="line">CMD ["sh", "-c", "/opt/app/$&#123;LIB_PATH&#125;"]</span><br></pre></td></tr></table></figure></p></li><li><p><code>docker-entrypoint.sh</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">set -eo pipefail</span><br><span class="line">shopt -s nullglob</span><br><span class="line"></span><br><span class="line">if [ -z "$LIB_PATH" ]; then</span><br><span class="line">    echo &gt;&amp;2 'You need to specify LIB_PATH'</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exec "$@"</span><br></pre></td></tr></table></figure></p></li></ul><blockquote><p>注： 这不是必须的，这边只是简单检查了下 <code>LIB_PATH</code> 是不是指定了</p></blockquote><h3>构建镜像</h3><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 构建镜像</span><br><span class="line">docker build -t gythialy/java-app . </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 推送到私有仓库</span><br><span class="line">docker tag gythialy/java-app hub.vking.io/java-app:alpine </span><br><span class="line">docker push hub.vking.io/java-app:alpine</span><br></pre></td></tr></table></figure></p><h3>构建 Java 应用</h3><p><a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a> 构建出的 Java 程序目录如下，通过 <code>bin/jx-ws</code> 启动程序。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   ├── jx-ws</span><br><span class="line">│   ├── jx-ws.bat</span><br><span class="line">│   ├── logs</span><br><span class="line">│   │   ├── 2018-01</span><br><span class="line">│   │   │   └── ws-2018-01-31-1.log</span><br><span class="line">│   │   └── ws.log</span><br><span class="line">│   └── ws.json</span><br><span class="line">└── lib</span><br><span class="line">    └── jx-ws-1.1.1-all.jar</span><br></pre></td></tr></table></figure></p><h3>构建并启动容器</h3><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">app_name=java-test</span><br><span class="line"></span><br><span class="line">docker stop $app_name || true \</span><br><span class="line">&amp;&amp; docker rm $app_name || true \</span><br><span class="line">&amp;&amp; docker run --name $app_name -d \</span><br><span class="line">    --restart always \</span><br><span class="line">    -e LIB_PATH=bin/jx-ws \</span><br><span class="line">    -v /home/vking/wks/jx-ws/jx-ws-shadow-1.1.1:/opt/app \</span><br><span class="line">    hub.vking.io/java-app:alpine</span><br></pre></td></tr></table></figure></p><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一个项目中由于使用了不同的版本的 JDK 导致兼容问题，故把不同的应用通过 Docker 分别包装了一下，为了减少镜像大小，选用基于 [&lt;a href=&quot;http://alpinelinux.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AlpineLinux&lt;/a&gt;] 的&lt;a href=&quot;https://github.com/anapsix/docker-alpine-java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;镜像&lt;/a&gt;作为基础镜像。&lt;/p&gt;
&lt;p&gt;主要完成了下面几件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置时区为北京时间&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;docker-entrypoint.sh&lt;/code&gt;  做基础的环境变量检查（可选）&lt;/li&gt;
&lt;li&gt;配置 &lt;code&gt;VOLUME&lt;/code&gt;，方便通过挂载不同的目录复用&lt;/li&gt;
&lt;li&gt;启动 Java 程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Docker" scheme="https://gythialy.github.io/tags/Docker/"/>
    
      <category term="Java" scheme="https://gythialy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>搭建 Docker 私有镜像</title>
    <link href="https://gythialy.github.io/Docker-Private-registry/"/>
    <id>https://gythialy.github.io/Docker-Private-registry/</id>
    <published>2018-01-30T01:18:52.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h3>介绍</h3><p>目前部署私有 Docker Registry 有下面几个选择</p><ul><li><a href="https://github.com/vmware/harbor" target="_blank" rel="noopener">Vmware Harbor</a></li><li><a href="https://docs.docker.com/registry/" target="_blank" rel="noopener">官方 Registry </a></li><li><a href="http://port.us.org/" target="_blank" rel="noopener">Portus</a></li><li><a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">nexus</a></li></ul><p>官方 registry 比较简单，没有 UI 界面；Portus 其实也是基于官方 registry ，可以理解为官方增强版，同时提供了<a href="https://github.com/SUSE/Portus/tree/master/examples" target="_blank" rel="noopener">部署的示例</a>；Harbor，nexus 等都比较重量级，部署比较麻烦，这里暂时不考虑。由于我们的使用场景非常简单，所有选用官方 registry 镜像如何部署私有服务器。下面简单介绍下如何配置。</p><p><a id="more"></a></p><h3>官方 Registry</h3><ul><li><p>配置，<a href="https://docs.docker.com/registry/configuration/#list-of-configuration-options" target="_blank" rel="noopener">详细配置介绍</a><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line"><span class="attr">  accesslog:</span></span><br><span class="line"><span class="attr">    disabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  level:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">  formatter:</span> <span class="string">text</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">    environment:</span> <span class="string">staging</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">  delete:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line"><span class="attr">  filesystem:</span></span><br><span class="line"><span class="attr">    rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line"><span class="attr">  addr:</span> <span class="string">:5000</span></span><br><span class="line"><span class="attr">  headers:</span></span><br><span class="line"><span class="attr">    X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line"><span class="attr">  storagedriver:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p></li><li><p>启动</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">registry_id=registry</span><br><span class="line"></span><br><span class="line">docker stop $registry_id || true &amp;&amp; docker rm $registry_id || true\</span><br><span class="line">&amp;&amp; docker run --name $registry_id -d\</span><br><span class="line">    --restart always \</span><br><span class="line">    --network registry-net \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v /srv/docker/registry/config.yml:/etc/docker/registry/config.yml \</span><br><span class="line">    -v /srv/docker/registry/data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure></p></li></ul><h3>配置 UI</h3><p>由于官方镜像只有后台，提供了一组 RESTful API，UI 需要单独配置，可以选 <a href="https://github.com/mkuchin/docker-registry-web" target="_blank" rel="noopener">docker-registry-web</a>，<a href="https://github.com/Joxit/docker-registry-ui" target="_blank" rel="noopener">docker-registry-ui</a>，这里就以 <code>docker-registry-ui</code> 为例，操作都大同小异。</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">app_id=registry-ui</span><br><span class="line"></span><br><span class="line">docker stop $app_id || true &amp;&amp; docker rm $app_id || true\</span><br><span class="line">&amp;&amp; docker run --name $app_id -d\</span><br><span class="line">    --restart always \</span><br><span class="line">    --network registry-net \</span><br><span class="line">    -p 8088:80 \</span><br><span class="line">    -e REGISTRY_URL=http://registry:5000 \</span><br><span class="line">    -e DELETE_IMAGES=true \</span><br><span class="line">    joxit/docker-registry-ui:static</span><br></pre></td></tr></table></figure></p><h3>配置反向代理</h3><p>如果需要通过 nginx 配置反向代理的话，需要注意添加 <code>client_max_body_size</code> 和 <code>chunked_transfer_encoding</code> 设置，具体参考 <a href="/Docker-nginx-reverse-proxy/" title="Docker nginx 反向代理设置">Docker nginx 反向代理设置</a>。</p><p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> hub.vking.io &#123;</span><br><span class="line">    <span class="comment"># jenkins</span></span><br><span class="line">    <span class="attribute">server</span> registry:<span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">server_name</span> hub.vking.io;</span><br><span class="line">     <span class="comment"># disable any limits to avoid HTTP 413 for large image uploads</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)</span></span><br><span class="line">    <span class="attribute">chunked_transfer_encoding</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://hub.vking.io;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log vhost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>参考资料</h3><ul><li>https://docker_practice.gitee.io/repository/registry.html</li><li>https://docs.docker.com/registry/</li></ul><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;介绍&lt;/h3&gt;
&lt;p&gt;目前部署私有 Docker Registry 有下面几个选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vmware/harbor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vmware Harbor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/registry/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方 Registry &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://port.us.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Portus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sonatype.com/nexus-repository-oss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nexus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方 registry 比较简单，没有 UI 界面；Portus 其实也是基于官方 registry ，可以理解为官方增强版，同时提供了&lt;a href=&quot;https://github.com/SUSE/Portus/tree/master/examples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;部署的示例&lt;/a&gt;；Harbor，nexus 等都比较重量级，部署比较麻烦，这里暂时不考虑。由于我们的使用场景非常简单，所有选用官方 registry 镜像如何部署私有服务器。下面简单介绍下如何配置。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Docker" scheme="https://gythialy.github.io/tags/Docker/"/>
    
      <category term="Registry" scheme="https://gythialy.github.io/tags/Registry/"/>
    
  </entry>
  
  <entry>
    <title>Docker nginx 反向代理设置</title>
    <link href="https://gythialy.github.io/Docker-nginx-reverse-proxy/"/>
    <id>https://gythialy.github.io/Docker-nginx-reverse-proxy/</id>
    <published>2018-01-25T04:59:53.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h2>缘起</h2><p>最近在公司搭建了一个基于 <a href="https://gogs.io/" target="_blank" rel="noopener">Gogs</a> 的代码管理系统，以及基于 <a href="https://kanboard.org/" target="_blank" rel="noopener">Kanboard</a> 的任务管理系统等几个内部系统。由于部署在同一台机器上，基于不同的端口区分不同的服务。比如：</p><ul><li>Git 服务 <code>http://10.10.1.110:10080</code></li><li>任务管理系统<code>http://10.10.1.110:8888</code></li><li>其他</li></ul><p>为了更好的使用，通过内部域名区分，比如 ：</p><ul><li>Git 服务 <code>http://gogs.vking.io</code></li><li>任务管理系统 <code>http://task.vking.io</code></li><li>其他</li></ul><blockquote><p>注：vking.io 是内部域名，可通过 <a href="http://www.thekelleys.org.uk/dnsmasq/doc.html" target="_blank" rel="noopener">dnsmasq</a> 配置。</p></blockquote><p><a id="more"></a></p><h2>方案一</h2><p>现有服务都是通过  <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>  部署，<a href="https://www.nginx.com/" target="_blank" rel="noopener">nginx</a> 同样通过 Docker 部署，使用官方提供的镜像即可。</p><ul><li>新建 nginx 配置文件， <code>nginx.conf</code>，存放路径为 <code>/srv/docker/nginx/nginx.conf</code></li></ul><p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user  nginx;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># daemon off;</span></span><br></pre></td></tr></table></figure></p><ul><li>新建反向代理设置文件 <code>reverse-proxy.conf</code>，存放路径为 <code>/srv/docker/nginx/conf.d/reverse-proxy.conf</code></li></ul><p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the</span></span><br><span class="line"><span class="comment"># scheme used to connect to this server</span></span><br><span class="line"><span class="attribute">map</span> <span class="variable">$http_x_forwarded_proto</span> <span class="variable">$proxy_x_forwarded_proto</span> &#123;</span><br><span class="line">  <span class="attribute">default</span> <span class="variable">$http_x_forwarded_proto</span>;</span><br><span class="line">  ''      $scheme;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># If we receive X-Forwarded-Port, pass it through; otherwise, pass along the</span></span><br><span class="line"><span class="comment"># server port the client connected to</span></span><br><span class="line"><span class="attribute">map</span> <span class="variable">$http_x_forwarded_port</span> <span class="variable">$proxy_x_forwarded_port</span> &#123;</span><br><span class="line">  <span class="attribute">default</span> <span class="variable">$http_x_forwarded_port</span>;</span><br><span class="line">  ''      $server_port;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any</span></span><br><span class="line"><span class="comment"># Connection header that may have been passed to this server</span></span><br><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$proxy_connection</span> &#123;</span><br><span class="line">  <span class="attribute">default</span> upgrade;</span><br><span class="line">  '' close;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Apply fix for very long server names</span></span><br><span class="line"><span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line"><span class="comment"># Default dhparam</span></span><br><span class="line"><span class="attribute">ssl_dhparam</span> /etc/nginx/dhparam/dhparam.pem;</span><br><span class="line"><span class="comment"># Set appropriate X-Forwarded-Ssl header</span></span><br><span class="line"><span class="attribute">map</span> <span class="variable">$scheme</span> <span class="variable">$proxy_x_forwarded_ssl</span> &#123;</span><br><span class="line">  <span class="attribute">default</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">https</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">gzip_types</span> text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"><span class="attribute">log_format</span> vhost <span class="string">'<span class="variable">$host</span> <span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] '</span></span><br><span class="line">                 <span class="string">'"<span class="variable">$request</span>" <span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> '</span></span><br><span class="line">                 <span class="string">'"<span class="variable">$http_referer</span>" "<span class="variable">$http_user_agent</span>"'</span>;</span><br><span class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP 1.1 support</span></span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="variable">$proxy_connection</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$proxy_x_forwarded_proto</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Ssl <span class="variable">$proxy_x_forwarded_ssl</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Port <span class="variable">$proxy_x_forwarded_port</span>;</span><br><span class="line"><span class="comment"># Mitigate httpoxy attack (see README for details)</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Proxy <span class="string">""</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">server_name</span> _; <span class="comment"># This is just an invalid value which will never trigger on a real hostname.</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">access_log</span> /var/log/nginx/access.log vhost;</span><br><span class="line"><span class="attribute">return</span> <span class="number">503</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># gogs.vking.io</span></span><br><span class="line"><span class="attribute">upstream</span> gogs.vking.io &#123;</span><br><span class="line"><span class="comment"># gogs</span></span><br><span class="line"><span class="attribute">server</span> gogs:<span class="number">3000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">server_name</span> gogs.vking.io;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://gogs.vking.io;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log vhost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># task.vking.io</span></span><br><span class="line"><span class="attribute">upstream</span> task.vking.io &#123;</span><br><span class="line">    <span class="comment"># kanboard</span></span><br><span class="line">    <span class="attribute">server</span> kanboard:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">server_name</span> task.vking.io;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://task.vking.io;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log vhost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>gogs 启动命令</li></ul><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d --name gogs \</span><br><span class="line">    --restart always \</span><br><span class="line">    -p 10022:22  \</span><br><span class="line">    -p 10080:3000 \</span><br><span class="line">    --network gogs-net \</span><br><span class="line">    -v /srv/docker/gogs:/data \</span><br><span class="line">    gogs/gogs:latest</span><br></pre></td></tr></table></figure></p><blockquote><p>注： <code>upstream gogs.vking.io</code> 中的 <code>server</code> 中的 <code>gogs:3000</code> 分别指容器名称和原始expose 的端口。</p></blockquote><ul><li>启动容器</li></ul><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d --name nginx \</span><br><span class="line">    --restart always \</span><br><span class="line">    -p 80:80 \</span><br><span class="line">    --network gogs-net \</span><br><span class="line">    -v /srv/docker/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">    -v /srv/docker/nginx/conf.d:/etc/nginx/conf.d \</span><br><span class="line">    nginx:alpines</span><br></pre></td></tr></table></figure></p><blockquote><p>注：<code>--network gogs-net</code> 指定三个容器在同一网络，如果用默认的 <code>bridge</code>的话，不需要设置</p></blockquote><h2>方案二</h2><p>因为这些服务都是部署在一台机器上的，可以通过 Docker 的自动服务发现部署，原理<a href="http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/" target="_blank" rel="noopener">见此</a>。</p><ul><li><p>gogs</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d --name gogs \</span><br><span class="line">    --restart always \</span><br><span class="line">-p 10022:22  -p 10080:3000 \</span><br><span class="line">--network gogs-net \</span><br><span class="line">-e VIRTUAL_HOST=gogs.vking.io \</span><br><span class="line">-e VIRTUAL_PORT=3000 \</span><br><span class="line">-v /opt/docker/gogs:/data \</span><br><span class="line">gogs/gogs:latest</span><br></pre></td></tr></table></figure></p></li><li><p>Kanboard</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d --name kanboard \</span><br><span class="line">    --restart always \</span><br><span class="line">    -p 8888:80 \</span><br><span class="line">    --network gogs-net \</span><br><span class="line">    -e VIRTUAL_HOST=task.vking.io \</span><br><span class="line">    -e VIRTUAL_PORT=80 \</span><br><span class="line">    -v /srv/docker/kanboard/data:/var/www/app/data \</span><br><span class="line">    -v /srv/docker/kanboard/plugins:/var/www/app/plugins \</span><br><span class="line">    kanboard/kanboard:latest</span><br></pre></td></tr></table></figure></p></li><li><p>nginx</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d --name nginx \</span><br><span class="line">    --restart always \</span><br><span class="line">    -p 80:80 \</span><br><span class="line">    --network gogs-net \</span><br><span class="line">    -v /var/run/docker.sock:/tmp/docker.sock:ro \</span><br><span class="line">    jwilder/nginx-proxy:alpine</span><br></pre></td></tr></table></figure></p></li></ul><blockquote><p>注：关键是容器通过 <code>-e VIRTUAL_HOST</code> 指定 url，通过 <code>-e VIRTUAL_PORT=80</code> 指定端口，同样端口也必须是原始镜像 expose 的端口。</p></blockquote><h2>延伸</h2><p>目前服务都是通过 shell 启动，可改成通过 <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker Compose</a> 统一编排任务，把 dnsmasq+nginx+gogs+... 等统一管理。如果是部署在公网上的话，还可以把 SSL 证书到期自动刷新等一起编排。</p><p><code>---EOF---</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;缘起&lt;/h2&gt;
&lt;p&gt;最近在公司搭建了一个基于 &lt;a href=&quot;https://gogs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gogs&lt;/a&gt; 的代码管理系统，以及基于 &lt;a href=&quot;https://kanboard.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kanboard&lt;/a&gt; 的任务管理系统等几个内部系统。由于部署在同一台机器上，基于不同的端口区分不同的服务。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 服务 &lt;code&gt;http://10.10.1.110:10080&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;任务管理系统&lt;code&gt;http://10.10.1.110:8888&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了更好的使用，通过内部域名区分，比如 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 服务 &lt;code&gt;http://gogs.vking.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;任务管理系统 &lt;code&gt;http://task.vking.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：vking.io 是内部域名，可通过 &lt;a href=&quot;http://www.thekelleys.org.uk/dnsmasq/doc.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dnsmasq&lt;/a&gt; 配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Docker" scheme="https://gythialy.github.io/tags/Docker/"/>
    
      <category term="nginx" scheme="https://gythialy.github.io/tags/nginx/"/>
    
      <category term="Proxy" scheme="https://gythialy.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>安装配置 Supervisor</title>
    <link href="https://gythialy.github.io/install-and-config-supervisor/"/>
    <id>https://gythialy.github.io/install-and-config-supervisor/</id>
    <published>2017-08-10T07:17:29.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h3>在线安装</h3><ul><li><p>通过 <code>Setuptools</code>安装</p><p><code>easy_install supervisor</code></p></li><li><p>Ubuntu 安装</p><p><code>sudo apt-get install supervisor</code></p></li></ul><h3>离线安装</h3><ul><li>从 <a href="http://pypi.python.org/pypi/supervisor" target="_blank" rel="noopener">PyPi</a> 下载 <code>supervisor</code>离线包</li><li>下载依赖项<ul><li>setuptools (latest) from <a href="http://pypi.python.org/pypi/setuptools" target="_blank" rel="noopener">http://pypi.python.org/pypi/setuptools</a>.</li><li>meld3 (latest) from <a href="http://www.plope.com/software/meld3/" target="_blank" rel="noopener">http://www.plope.com/software/meld3/</a>.</li></ul></li><li>分别通过 <code>python setup.py install</code> 安装</li></ul><blockquote><p>注：根据不同的系统，可能需要 root 权限执行安装</p></blockquote><p><a id="more"></a></p><h3>配置</h3><ul><li><p>生成默认配置</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件目录</span></span><br><span class="line">mkdir -p /etc/supervisor</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成默认配置</span></span><br><span class="line">sudo sh -c '/usr/local/bin/echo_supervisord_conf  &gt; /etc/supervisor/supervisor.conf'</span><br></pre></td></tr></table></figure></p></li><li><p>修改配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:jx-ws]</span><br><span class="line">command                 = /bin/bash jx-ws</span><br><span class="line">directory               = /home/$&#123;user.home&#125;/opt/jx-ws-shadow-1.0.0/bin</span><br><span class="line">autostart               = true</span><br><span class="line">autorestart             = true</span><br><span class="line">stdout_logfile          = /var/log/ws/out.log</span><br><span class="line">stdout_logfile_maxbytes = 50MB</span><br><span class="line">stderr_logfile          = /var/log/ws/err.log</span><br><span class="line">stderr_logfile_maxbytes = 10MB</span><br></pre></td></tr></table></figure></p><p>说明:</p><ul><li>如果启动的程序为 shell，需要在前面增加 <code>/bin/bash</code></li><li><code>directory</code> 设置为可执行程序的上级目录</li><li>log目录不会自动创建，需手动创建，但是日志文件会自动生成</li><li>Java 中通过 <code>user.dir</code>获取到的目录为 <code>supervisor</code> 的目录，如需获取程序所在 jar 的运行目录需自行处理</li><li>启动需要 root 权限，可通过 <code>sudo supervisord -c /etc/supervisor/supervisor.conf</code> 指定配置路径</li></ul></li></ul><h3>运行</h3><ul><li><p>启动 <code>sudo supervisord -c /etc/supervisor/supervisor.conf</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">supervisord -- run a set of applications as daemons.</span><br><span class="line"></span><br><span class="line">Usage: /usr/bin/supervisord [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-c/--configuration FILENAME -- configuration file</span><br><span class="line">-n/--nodaemon -- run in the foreground (same as 'nodaemon=true' in config file)</span><br><span class="line">-h/--help -- print this usage message and exit</span><br><span class="line">-v/--version -- print supervisord version number and exit</span><br><span class="line">-u/--user USER -- run supervisord as this user (or numeric uid)</span><br><span class="line">-m/--umask UMASK -- use this umask for daemon subprocess (default is 022)</span><br><span class="line">-d/--directory DIRECTORY -- directory to chdir to when daemonized</span><br><span class="line">-l/--logfile FILENAME -- use FILENAME as logfile path</span><br><span class="line">-y/--logfile_maxbytes BYTES -- use BYTES to limit the max size of logfile</span><br><span class="line">-z/--logfile_backups NUM -- number of backups to keep when max bytes reached</span><br><span class="line">-e/--loglevel LEVEL -- use LEVEL as log level (debug,info,warn,error,critical)</span><br><span class="line">-j/--pidfile FILENAME -- write a pid file for the daemon process to FILENAME</span><br><span class="line">-i/--identifier STR -- identifier used for this instance of supervisord</span><br><span class="line">-q/--childlogdir DIRECTORY -- the log directory for child process logs</span><br><span class="line">-k/--nocleanup --  prevent the process from performing cleanup (removal of</span><br><span class="line">                   old automatic child log files) at startup.</span><br><span class="line">-a/--minfds NUM -- the minimum number of file descriptors for start success</span><br><span class="line">-t/--strip_ansi -- strip ansi escape codes from process output</span><br><span class="line">--minprocs NUM  -- the minimum number of processes available for start success</span><br><span class="line">--profile_options OPTIONS -- run supervisord under profiler and output</span><br><span class="line">                             results based on OPTIONS, which  is a comma-sep'd</span><br><span class="line">                             list of 'cumulative', 'calls', and/or 'callers',</span><br><span class="line">                             e.g. 'cumulative,callers')</span><br></pre></td></tr></table></figure></p></li><li><p>查看状态 <code>sudo supervisorctl status</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl -- control applications run by supervisord from the cmd line.</span><br><span class="line"></span><br><span class="line">Usage: /usr/bin/supervisorctl [options] [action [arguments]]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-c/--configuration FILENAME -- configuration file path (default /etc/supervisord.conf)</span><br><span class="line">-h/--help -- print usage message and exit</span><br><span class="line">-i/--interactive -- start an interactive shell after executing commands</span><br><span class="line">-s/--serverurl URL -- URL on which supervisord server is listening</span><br><span class="line">     (default "http://localhost:9001").</span><br><span class="line">-u/--username USERNAME -- username to use for authentication with server</span><br><span class="line">-p/--password PASSWORD -- password to use for authentication with server</span><br><span class="line">-r/--history-file -- keep a readline history (if readline is available)</span><br><span class="line"></span><br><span class="line">action [arguments] -- see below</span><br><span class="line"></span><br><span class="line">Actions are commands like "tail" or "stop".  If -i is specified or no action is</span><br><span class="line">specified on the command line, a "shell" interpreting actions typed</span><br><span class="line">interactively is started.  Use the action "help" to find out about available</span><br><span class="line">actions.</span><br></pre></td></tr></table></figure></p></li></ul><h3><a href="http://supervisord.org/api.html" target="_blank" rel="noopener">XML-RPC API Documentation</a></h3><ul><li><p>配置</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[inet_http_server]        ; inet (TCP) server disabled by default</span><br><span class="line">port=127.0.0.1:9001       ; (ip_address:port specifier, *:port for all iface)</span><br><span class="line">username=ops              ; (default is no username (open server))</span><br><span class="line">password=vipshop          ; (default is no password (open server))</span><br></pre></td></tr></table></figure></p></li><li><p>连接</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpclib</span><br><span class="line">server = xmlrpclib.Server(<span class="string">'http://ops:vipshop@127.0.0.1:9001/RPC2'</span>)</span><br></pre></td></tr></table></figure></p></li><li><p>查询API 支持的接口</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">methods = server.system.listMethods()</span><br><span class="line"><span class="keyword">print</span> methods</span><br></pre></td></tr></table></figure></p></li></ul><p>---EOF---</p>]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;在线安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;Setuptools&lt;/code&gt;安装&lt;/p&gt;
&lt;p&gt;&lt;code&gt;easy_install supervisor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu 安装&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install supervisor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;离线安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;a href=&quot;http://pypi.python.org/pypi/supervisor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyPi&lt;/a&gt; 下载 &lt;code&gt;supervisor&lt;/code&gt;离线包&lt;/li&gt;
&lt;li&gt;下载依赖项
&lt;ul&gt;
&lt;li&gt;setuptools (latest) from &lt;a href=&quot;http://pypi.python.org/pypi/setuptools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pypi.python.org/pypi/setuptools&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;meld3 (latest) from &lt;a href=&quot;http://www.plope.com/software/meld3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.plope.com/software/meld3/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分别通过 &lt;code&gt;python setup.py install&lt;/code&gt; 安装&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：根据不同的系统，可能需要 root 权限执行安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Supervisor" scheme="https://gythialy.github.io/tags/Supervisor/"/>
    
      <category term="Ubuntu" scheme="https://gythialy.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>在 travis 添加 ssh key</title>
    <link href="https://gythialy.github.io/travis-add-ssh-key/"/>
    <id>https://gythialy.github.io/travis-add-ssh-key/</id>
    <published>2017-08-10T02:19:25.000Z</published>
    <updated>2018-08-16T08:02:00.280Z</updated>
    
    <content type="html"><![CDATA[<h3>生成 SSH key</h3><ul><li><p>生成</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C "&lt;your_email&gt;" -f github_deploy_key -N ''</span><br></pre></td></tr></table></figure></p><blockquote><p>注： 这里使用 <code>github_deploy_key</code> 作为存储的名字</p></blockquote></li></ul><p>这会生成两个文件</p><ul><li><p>公钥  <code>github_deploy_key.pub</code></p></li><li><p>私钥 <code>github_deploy_key</code></p></li><li><p>拷贝公钥到剪贴板</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Copies the contents of the id_rsa.pub file to your clipboard</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> clip &lt; ~/.ssh/github_deploy_key.pub</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如果是做为项目的部署公钥，需要添加到项目中，以 GitHub 为例，添加公钥的时候需要勾上 <code>Allow Write Access</code></p></blockquote></li><li><p>删除 <code>github_deploy_key.pub</code></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm github_deploy_key.pub</span><br></pre></td></tr></table></figure></p><h3>安装 <a href="https://github.com/travis-ci/travis.rb" target="_blank" rel="noopener">The Travis Client</a></h3></li><li><p>首先确保已经安装好 Ruby(1.9.3+)，官方推荐 2.0.0</p></li><li><p>执行 <code>gem install travis -v 1.8.8 --no-rdoc --no-ri</code> 安装 travis client</p></li><li><p>检查安装是否正确 <code>travis version</code></p></li></ul><h3>加密 SSH key</h3><ul><li><p>加密文件</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt-file github_deploy_key</span><br></pre></td></tr></table></figure></p><p>加密后的文件为 <code>github_deploy_key.enc</code></p><p>会输出类似的结果：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">encrypting github_deploy_key for &lt;username&gt;/&lt;repository&gt;</span><br><span class="line">storing result as github_deploy_key.enc</span><br><span class="line">storing secure env variables for decryption</span><br><span class="line"></span><br><span class="line">openssl aes-256-cbc -K $encrypted_XXXXXXXXXXXX_key -iv $encrypted_XXXXXXXXXXXX_iv -in github_deploy_key.enc -out github_deploy_key -d</span><br><span class="line"></span><br><span class="line">Pro Tip: You can add it automatically by running with --add.</span><br><span class="line"></span><br><span class="line">Make sure to add github_deploy_key.enc to the git repository.</span><br><span class="line">Make sure not to add github_deploy_key to the git repository.</span><br><span class="line">Commit all changes to your .travis.yml.</span><br></pre></td></tr></table></figure></p><blockquote><p>注： 如果是 GitHub 项目，建议先通过 <code>travis login</code>  登录，然后再通过 <code>travis encrypt-file github_deploy_key -add</code> 加密，travis Client 会自动更新 <code>.traivs.yaml</code>并且在 travis 中自动添加变量 <code>encrypted_XXXXXXXXXXXX_key</code>  和 <code>encrypted_XXXXXXXXXXXX_iv</code></p></blockquote></li><li><p>删除 <code>github_deploy_key</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f github_deploy_key</span><br></pre></td></tr></table></figure></p><p>​</p></li></ul><h3>修改 <code>.travis.yaml</code></h3><p>在 <code>before_install</code> 添加如下内容：</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_a7d17a00ff1b_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_a7d17a00ff1b_iv</span></span><br><span class="line"><span class="bullet">  -</span><span class="string">in</span> <span class="string">.travis/github_deploy_key.enc</span> <span class="bullet">-out</span> <span class="string">~/.ssh/github_deploy_key</span> <span class="bullet">-d</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/github_deploy_key</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent)</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh-add</span> <span class="string">~/.ssh/github_deploy_key</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cp</span> <span class="string">.travis/ssh_config</span> <span class="string">~/.ssh/config</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">'gythialy'</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">'gythialy@users.noreply.github.com'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注： 步骤如下：通过openssl 解密文件并输出到 <code>~/.ssh/github_deploy_key</code> 中；设定 <code>~/.ssh/github_deploy_key</code> 文件权限并添加到 <code>ssh-agent</code> 中</p></blockquote><p><code>ssh_config</code>内容，主要是防止首次连接的时候，会弹出提示。如果有其他的地址，参考此设置即可。</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">github.com</span></span><br><span class="line">    <span class="string">User</span> <span class="string">git</span></span><br><span class="line">    <span class="string">StrictHostKeyChecking</span> <span class="literal">no</span></span><br><span class="line">    <span class="string">IdentityFile</span> <span class="string">~/.ssh/github_deploy_key</span></span><br><span class="line">    <span class="string">IdentitiesOnly</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">Host</span> <span class="string">gitcafe.com</span></span><br><span class="line">    <span class="string">User</span> <span class="string">git</span></span><br><span class="line">    <span class="string">StrictHostKeyChecking</span> <span class="literal">no</span></span><br><span class="line">    <span class="string">IdentityFile</span> <span class="string">~/.ssh/github_deploy_key</span></span><br><span class="line">    <span class="string">IdentitiesOnly</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">Host</span> <span class="string">git.coding.net</span></span><br><span class="line">    <span class="string">User</span> <span class="string">git</span></span><br><span class="line">    <span class="string">StrictHostKeyChecking</span> <span class="literal">no</span></span><br><span class="line">    <span class="string">IdentityFile</span> <span class="string">~/.ssh/github_deploy_key</span></span><br><span class="line">    <span class="string">IdentitiesOnly</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure></p><p>至此，就成功在 travis 中添加了SSH密钥且能建立链接。可用于且不限于：</p><ul><li>推送 CI 编译后的文件/结果</li><li>免费构建私有项目（这个可能会违反TOS，不建议...）</li><li>etc....</li></ul><h3>参考</h3><ul><li><a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">Connecting to GitHub with SSH</a></li><li><a href="https://docs.travis-ci.com/user/encrypting-files/" target="_blank" rel="noopener">Encrypting Files</a></li></ul><p>---EOF---</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;生成 SSH key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生成&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
      
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="travis" scheme="https://gythialy.github.io/tags/travis/"/>
    
      <category term="SSH" scheme="https://gythialy.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>通过 travis 自动部署 Hexo</title>
    <link href="https://gythialy.github.io/auto-deploy-hexo-by-travis/"/>
    <id>https://gythialy.github.io/auto-deploy-hexo-by-travis/</id>
    <published>2017-08-08T05:26:13.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h3>准备工作</h3><ul><li><p>生成 GitHub 的 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a>，需要有 repo 相关权限</p></li><li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">Git deployer plugin for Hexo</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p></li></ul><h3>配置</h3><ul><li><p>配置 Hexo</p><p>在 Hexo 的<code>_config.yml</code> 中添加 Hexo 编译好后文件的git地址，如果需要同时提交到多个不同地址，可以添加多个。</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://__GITHUB_TOKEN__@github.com/&#123;user_name&#125;/&#123;git_repo&#125;</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">gythialy</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">gythialy@users.noreply.github.com</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注：<code>https://__GITHUB_TOKEN__@github.com/{user_name}/{git_repo}</code>  示例为 <code>https://__GITHUB_TOKEN__@github.com/gythialy/gythialy.github.io.git</code></p></blockquote></li><li><p>配置 travis</p><p>在 Hexo 根目录添加 <code>.travis.yml</code>，内容如下：</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">raw</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">gulp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">'gythialy'</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">'gythialy@users.noreply.github.com'</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">"s/__GITHUB_TOKEN__/$&#123;__GITHUB_TOKEN__&#125;/"</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="comment"># use custom theme config</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--branch</span> <span class="string">v5.1.2</span> <span class="bullet">--depth=10</span>  <span class="attr">https://github.com/iissnan/hexo-theme-next.git</span> <span class="string">themes/next</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">checkout</span> <span class="bullet">-b</span> <span class="string">v5.1.2</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cp</span> <span class="string">next_config.yml</span> <span class="string">./themes/next/_config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;&amp;</span> <span class="string">gulp</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注： 因为源文件和生成的文件共用了git repo，所以需要指定只编译 源文件分支（<code>raw</code>），<code>master</code>作为编译好的文件存放路径。</p></blockquote></li><li><p>配置 travis 环境变量</p><p>在 <a href="https://travis-ci.org/" title="Travis CI" target="_blank" rel="noopener">travis</a> 网页中添加变量<code>__GITHUB_TOKEN</code>__值为前面生成的 GitHub  Personal access tokens</p></li></ul><p>---EOF---</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;准备工作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生成 GitHub 的 &lt;a href=&quot;https://github.com/settings/tokens&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Personal access tokens&lt;/a
      
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="Hexo" scheme="https://gythialy.github.io/tags/Hexo/"/>
    
      <category term="travis" scheme="https://gythialy.github.io/tags/travis/"/>
    
      <category term="GitHub" scheme="https://gythialy.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Java 通过 JNA 调用 C/C++ 接口</title>
    <link href="https://gythialy.github.io/jna/"/>
    <id>https://gythialy.github.io/jna/</id>
    <published>2017-08-07T09:31:21.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h3>缘起</h3><p>项目中调用了第三方一个 Matlab 实现的数据清洗和机组状态评价的算法，但是对方不会除 Matlab 外的其他语言，最后只用 Matlab 生成了一个 dll/lib 文件。由于对方提供的接口质量真心不好，而且对方也无力修改。最终方案只好由我方在其基础上用 C++ 重新包装一下。在给我方 Client 调用时，需要把从多数据源查询数据的细节封装掉，最终就形成了Java Client-&gt; Java Interface-&gt;C++ Interface-&gt;Matlab/C++ Interface(第三方) 这样一个诡异的调用链。</p><p>因只是 Java 单向调用 C++ 接口，故通过 <a href="https://github.com/java-native-access/jna" title="Java Native Access" target="_blank" rel="noopener">JNA</a> 实现。主要设计到 JNA 的结构体封装，指针声明及取值，结构体指针定义及取值。</p><h3>实现</h3><p>C++ 的封装接口逻辑非常简单，根据业务提供数据清洗和机组评价的两个接口。</p><p>由于Matlab 导出的 dll 效率是真心差，尤其时加载的时候，各种抛异常，每次加载dll大约需耗时20~30s。所以不能每次加载，故提供 <code>init/terminator</code> 实现按需加载及停用。</p><h4>C/C++ 头文件定义</h4><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __CALCULATOR_API_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __CALCULATOR_API_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> EXPORT_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> EXPORT_API </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random number to avoid errno conflicts</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CALCULATOR_ENOBASE 112345678</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Calculator exceptions */</span></span><br><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">CALCULATOR_EXCEPTION_ILLEGAL_FUNCTION = <span class="number">0x01</span>,</span><br><span class="line">CALCULATOR_EXCEPTION_ILLEGAL_PARA</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMBXILFUN  (CALCULATOR_ENOBASE + CALCULATOR_EXCEPTION_ILLEGAL_FUNCTION)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMBXILPARA  (CALCULATOR_ENOBASE + CALCULATOR_EXCEPTION_ILLEGAL_PARA)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">H2 = <span class="number">0X01</span>,</span><br><span class="line">CH4,</span><br><span class="line">C2H2,</span><br><span class="line">C2H4,</span><br><span class="line">TOTAL_HYDROCARBON,<span class="comment">//总烃</span></span><br><span class="line">CO,</span><br><span class="line">CO2</span><br><span class="line">&#125; OilChromatographyType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据清洗结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sImproveResult</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int32_t</span> valid; <span class="comment">// 有效数据个数</span></span><br><span class="line"><span class="keyword">float</span> validPercent; <span class="comment">// 数据有效值占比</span></span><br><span class="line"><span class="keyword">float</span>* abnormalData; <span class="comment">// 异常数据</span></span><br><span class="line"><span class="keyword">int32_t</span> abnormal_size; <span class="comment">// 异常数据个数</span></span><br><span class="line"><span class="keyword">float</span>* optimizeData; <span class="comment">// 优化后的数据</span></span><br><span class="line"><span class="keyword">int32_t</span> optimize_size; <span class="comment">// 优化数据个数</span></span><br><span class="line">&#125; sImproveResult, *ImproveResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 变压器输入参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sTransformer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">float</span> h2Value;</span><br><span class="line"><span class="keyword">float</span> totalHydrocarbon; <span class="comment">// 总烃</span></span><br><span class="line"><span class="keyword">float</span> c2h2Value;</span><br><span class="line"><span class="keyword">float</span> coValue;</span><br><span class="line"><span class="keyword">float</span> co2Value;</span><br><span class="line"><span class="keyword">float</span> dielectricLoss; <span class="comment">// 介损</span></span><br><span class="line"><span class="keyword">float</span> dcResistance; <span class="comment">//直阻</span></span><br><span class="line"><span class="keyword">float</span> absorptance; <span class="comment">//吸收比</span></span><br><span class="line"><span class="keyword">float</span> polarizeFactor; <span class="comment">// 极化系数</span></span><br><span class="line"><span class="keyword">float</span> electricCapacity; <span class="comment">// 电容量</span></span><br><span class="line"><span class="keyword">float</span> moisture; <span class="comment">// 微水</span></span><br><span class="line"><span class="keyword">float</span> breakdownVoltage; <span class="comment">// 击穿电压</span></span><br><span class="line"><span class="keyword">float</span> oilDielectricLoss; <span class="comment">// 油介损</span></span><br><span class="line"><span class="keyword">float</span> interfacialTension; <span class="comment">//界面张力</span></span><br><span class="line"><span class="keyword">float</span> electricResistivity; <span class="comment">//电阻率</span></span><br><span class="line"><span class="keyword">int16_t</span> runningLife; <span class="comment">// 运行年限</span></span><br><span class="line"><span class="keyword">float</span> ambientTemperature; <span class="comment">// 环境温度</span></span><br><span class="line"><span class="keyword">float</span> jointTemperature; <span class="comment">//接头温度</span></span><br><span class="line"><span class="keyword">float</span> oilTankTemperature; <span class="comment">// 油箱温度</span></span><br><span class="line">&#125; sTransformer, *Transformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 因素状态隶属度结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sFusionResult</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">float</span> *h1; <span class="comment">// 油色谱</span></span><br><span class="line"><span class="keyword">int16_t</span> h1_size;</span><br><span class="line"><span class="keyword">float</span> *h2; <span class="comment">// 电气试验</span></span><br><span class="line"><span class="keyword">int16_t</span> h2_size;</span><br><span class="line"><span class="keyword">float</span> *h3; <span class="comment">// 绝缘油</span></span><br><span class="line"><span class="keyword">int16_t</span> h3_size;</span><br><span class="line"><span class="keyword">float</span> *h4; <span class="comment">// 其余项</span></span><br><span class="line"><span class="keyword">int16_t</span> h4_size;</span><br><span class="line"><span class="keyword">float</span> qz1; <span class="comment">// 油色谱权重</span></span><br><span class="line"><span class="keyword">float</span> qz2; <span class="comment">// 电气试验权重</span></span><br><span class="line"><span class="keyword">float</span> qz3; <span class="comment">// 绝缘油权重</span></span><br><span class="line"><span class="keyword">float</span> qz4; <span class="comment">// 其余项权重</span></span><br><span class="line"><span class="keyword">float</span> m; <span class="comment">// 证据融合参数</span></span><br><span class="line"><span class="keyword">float</span> n; <span class="comment">// 证据融合参数</span></span><br><span class="line">&#125; sFusionResult, *FusionResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最终评价结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sFactorResult</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">float</span>* state;</span><br><span class="line"><span class="keyword">int16_t</span> state_size;</span><br><span class="line"><span class="keyword">int8_t</span>* comment;</span><br><span class="line"><span class="keyword">int16_t</span> comment_len;</span><br><span class="line">&#125; sFactorResult, *FactorResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int64_t</span> time;</span><br><span class="line"><span class="keyword">float</span> value;</span><br><span class="line">&#125; sImproveInput, *ImproveInput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sReviewResult</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Transformer indexScore;</span><br><span class="line"><span class="keyword">int16_t</span> indexScore_size;</span><br><span class="line">FusionResult indexFusion;</span><br><span class="line">FactorResult factorFusion;</span><br><span class="line">&#125; sReviewResult, *ReviewResult;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据清洗</span></span><br><span class="line"><span class="comment"> * @param  original[in]     原始数据起始地址</span></span><br><span class="line"><span class="comment"> * @param  originalLen[in] 原始数据长度</span></span><br><span class="line"><span class="comment"> * @param  result [out]      数据清洗结果</span></span><br><span class="line"><span class="comment"> * @return 0:成功;非0：失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">EXPORT_API int16_t <span class="title">improve_data</span><span class="params">(<span class="keyword">const</span> ImproveInput original, <span class="keyword">const</span> <span class="keyword">int32_t</span> originalLen, ImproveResult result)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态评价计算</span></span><br><span class="line"><span class="comment"> * @param  transformer[in]  主变参数</span></span><br><span class="line"><span class="comment"> * @param  result[out]     评价结果</span></span><br><span class="line"><span class="comment"> * @return  0:成功;非0：失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">EXPORT_API int16_t <span class="title">review_transformer</span><span class="params">(<span class="keyword">const</span> Transformer transformer, ReviewResult result)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化 dll</span></span><br><span class="line"><span class="comment"> * @return [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">EXPORT_API int16_t <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 err num 获取异常信息描述</span></span><br><span class="line"><span class="comment"> * @param  errnum[in] errnum</span></span><br><span class="line"><span class="comment"> * @return  errnum 对应的异常信息描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">EXPORT_API <span class="keyword">const</span> int8_t* <span class="title">calculator_strerror</span><span class="params">(<span class="keyword">int</span> errnum)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 停止计算模块</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function">EXPORT_API <span class="keyword">void</span> <span class="title">terminator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*__CALCULATOR_API_H__*/</span></span></span><br></pre></td></tr></table></figure></p><h4>Java 接口定义</h4><ul><li><p><code>CalculatorApi</code></p><p><code>CalculatorApi</code> 提供与 C++ 头文件中声明一致的函数定义，继承 <code>Library</code></p></li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jna.Library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CalculatorApi</span> <span class="keyword">extends</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">improve_data</span><span class="params">(ImproveInputWrapper.ByReference original, <span class="keyword">int</span> originalLen, ImproveResultWrapper result)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">review_transformer</span><span class="params">(TransformerWrapper transformer, ReviewResult result)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">terminator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>FactorResultWrapper</code></p><p>作为 C++ 中 结构体 <code>FactorResult</code>的封装类，需要继承<code>Structure</code>，原始 <code>state</code>定义为 <code>float *</code>，通过 <code>Pointer</code> 与其对应。必须要实现 <code>getFieldOrder</code>,其中字段的顺序必须和 C++ 中保持一致，且所有相关字段必须要设成 <code>Public</code> 。使用的时候，用的引用传递，所以必须要实现<code>Structure.ByReference</code>接口。具体代码实现如下：</p></li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jna.Pointer;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Structure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorResultWrapper</span> <span class="keyword">extends</span> <span class="title">Structure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FIELDS_ORDER = createFieldsOrder(<span class="string">"state"</span>, <span class="string">"state_size"</span>, <span class="string">"comment"</span>, <span class="string">"comment_len"</span>);</span><br><span class="line">    <span class="keyword">public</span> Pointer state;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> state_size;</span><br><span class="line">    <span class="keyword">public</span> String comment;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> comment_len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByReference</span> <span class="keyword">extends</span> <span class="title">FactorResultWrapper</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByReference</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByValue</span> <span class="keyword">extends</span> <span class="title">FactorResultWrapper</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByValue</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FactorResultWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FIELDS_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>FusionResultWrapper</code></p><p>作为 C++ 中 结构体 <code>FusionResult</code>的封装类，定义同上。</p></li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Pointer;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Structure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FusionResultWrapper</span> <span class="keyword">extends</span> <span class="title">Structure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FIELDS_ORDER = createFieldsOrder(<span class="string">"h1"</span>, <span class="string">"h1_size"</span>, <span class="string">"h2"</span>, <span class="string">"h2_size"</span>, <span class="string">"h3"</span>, <span class="string">"h3_size"</span>,</span><br><span class="line">            <span class="string">"h4"</span>, <span class="string">"h4_size"</span>, <span class="string">"qz1"</span>, <span class="string">"qz2"</span>, <span class="string">"qz3"</span>, <span class="string">"qz4"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>);</span><br><span class="line">    <span class="keyword">public</span> Pointer h1;    <span class="comment">// 油色谱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> h1_size;</span><br><span class="line">    <span class="keyword">public</span> Pointer h2;    <span class="comment">// 电气试验</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> h2_size;</span><br><span class="line">    <span class="keyword">public</span> Pointer h3;    <span class="comment">// 绝缘油</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> h3_size;</span><br><span class="line">    <span class="keyword">public</span> Pointer h4;    <span class="comment">// 其余项</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> h4_size;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> qz1;    <span class="comment">// 油色谱权重</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> qz2;    <span class="comment">// 电气试验权重</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> qz3;    <span class="comment">// 绝缘油权重</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> qz4;    <span class="comment">// 其余项权重</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> m;    <span class="comment">// 证据融合参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> n;    <span class="comment">// 证据融合参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByReference</span> <span class="keyword">extends</span> <span class="title">FusionResultWrapper</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByReference</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByValue</span> <span class="keyword">extends</span> <span class="title">FusionResultWrapper</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByValue</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FIELDS_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>ImproveInputWrapper</code></p><p>作为 C++ 中 结构体 <code>ImproveInput</code>的封装类，就是基本类型映射。</p></li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jna.Structure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImproveInputWrapper</span> <span class="keyword">extends</span> <span class="title">Structure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FIELDS_ORDER = createFieldsOrder(<span class="string">"time"</span>, <span class="string">"value"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> time;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImproveInputWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByReference</span> <span class="keyword">extends</span> <span class="title">ImproveInputWrapper</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByReference</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FIELDS_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>ImproveResultWrapper</code></p><p>作为 C++ 中 结构体<code>ImproveResult</code>的封装类</p></li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jna.Pointer;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Structure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImproveResultWrapper</span> <span class="keyword">extends</span> <span class="title">Structure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FIELDS_ORDER = createFieldsOrder(<span class="string">"valid"</span>, <span class="string">"validPercent"</span>, <span class="string">"abnormalData"</span>, <span class="string">"abnormal_size"</span>, <span class="string">"optimizeData"</span>, <span class="string">"optimize_size"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> valid;            <span class="comment">// 有效数据个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> validPercent;        <span class="comment">// 数据有效值占比</span></span><br><span class="line">    <span class="keyword">public</span> Pointer abnormalData;    <span class="comment">// 异常数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> abnormal_size;    <span class="comment">// 异常数据个数</span></span><br><span class="line">    <span class="keyword">public</span> Pointer optimizeData;    <span class="comment">// 优化后的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> optimize_size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByReference</span> <span class="keyword">extends</span> <span class="title">ImproveResultWrapper</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByReference</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FIELDS_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>ReviewResult</code></p><p>作为 C++ 中 结构体<code>ReviewResult</code>的封装类，此处包含多个结构体指针，需要通过 <code>ByReference</code>来声明，且需要分配内存。比如 <code>TransformerWrapper.ByReference indexScore</code>，需要通过 <code>toArray</code>分配内存</p></li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jna.Memory;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Native;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Structure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReviewResult</span> <span class="keyword">extends</span> <span class="title">Structure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_SIZE = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FIELDS_ORDER = createFieldsOrder(<span class="string">"indexScore"</span>, <span class="string">"indexScore_size"</span>, <span class="string">"indexFusion"</span>, <span class="string">"factorFusion"</span>);</span><br><span class="line">    <span class="keyword">public</span> TransformerWrapper.ByReference indexScore;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> indexScore_size;</span><br><span class="line">    <span class="keyword">public</span> FusionResultWrapper.ByReference indexFusion;</span><br><span class="line">    <span class="keyword">public</span> FactorResultWrapper.ByReference factorFusion;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReviewResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (indexScore_size == <span class="number">0</span>)</span><br><span class="line">            indexScore_size = STATE_SIZE;</span><br><span class="line">        indexScore = <span class="keyword">new</span> TransformerWrapper.ByReference();</span><br><span class="line">        TransformerWrapper[] wrappers = (TransformerWrapper[]) indexScore.toArray(indexScore_size);</span><br><span class="line">        <span class="keyword">for</span> (TransformerWrapper wrapper : wrappers) &#123;</span><br><span class="line">            wrapper.h2Value = <span class="number">0f</span>;</span><br><span class="line">            wrapper.totalHydrocarbon = <span class="number">0f</span>;        <span class="comment">// 总烃</span></span><br><span class="line">            wrapper.c2h2Value = <span class="number">0f</span>;</span><br><span class="line">            wrapper.coValue = <span class="number">0f</span>;</span><br><span class="line">            wrapper.co2Value = <span class="number">0f</span>;</span><br><span class="line">            wrapper.dielectricLoss = <span class="number">0f</span>;        <span class="comment">// 介损</span></span><br><span class="line">            wrapper.dcResistance = <span class="number">0f</span>;        <span class="comment">//直阻</span></span><br><span class="line">            wrapper.absorptance = <span class="number">0f</span>;            <span class="comment">//吸收比</span></span><br><span class="line">            wrapper.polarizeFactor = <span class="number">0f</span>;        <span class="comment">// 极化系数</span></span><br><span class="line">            wrapper.electricCapacity = <span class="number">0f</span>;        <span class="comment">// 电容量</span></span><br><span class="line">            wrapper.moisture = <span class="number">0f</span>;            <span class="comment">// 微水</span></span><br><span class="line">            wrapper.breakdownVoltage = <span class="number">0f</span>;    <span class="comment">// 击穿电压</span></span><br><span class="line">            wrapper.oilDielectricLoss = <span class="number">0f</span>;    <span class="comment">// 油介损</span></span><br><span class="line">            wrapper.interfacialTension = <span class="number">0f</span>;    <span class="comment">//界面张力</span></span><br><span class="line">            wrapper.electricResistivity = <span class="number">0f</span>; <span class="comment">//电阻率</span></span><br><span class="line">            wrapper.runningLife = <span class="number">0</span>;        <span class="comment">// 运行年限</span></span><br><span class="line">            wrapper.ambientTemperature = <span class="number">0f</span>;    <span class="comment">// 环境温度</span></span><br><span class="line">            wrapper.jointTemperature = <span class="number">0f</span>;        <span class="comment">//接头温度</span></span><br><span class="line">            wrapper.oilTankTemperature = <span class="number">0f</span>;    <span class="comment">// 油箱温度</span></span><br><span class="line">        &#125;</span><br><span class="line">        indexFusion = <span class="keyword">new</span> FusionResultWrapper.ByReference();</span><br><span class="line">        indexFusion.h1 = <span class="keyword">new</span> Memory(STATE_SIZE * Native.getNativeSize(Float.TYPE));</span><br><span class="line">        indexFusion.h1_size = STATE_SIZE;</span><br><span class="line">        indexFusion.h2 = <span class="keyword">new</span> Memory(STATE_SIZE * Native.getNativeSize(Float.TYPE));</span><br><span class="line">        indexFusion.h2_size = STATE_SIZE;</span><br><span class="line">        indexFusion.h3 = <span class="keyword">new</span> Memory(STATE_SIZE * Native.getNativeSize(Float.TYPE));</span><br><span class="line">        indexFusion.h3_size = STATE_SIZE;</span><br><span class="line">        indexFusion.h4 = <span class="keyword">new</span> Memory(STATE_SIZE * Native.getNativeSize(Float.TYPE));</span><br><span class="line">        indexFusion.h4_size = STATE_SIZE;</span><br><span class="line">        factorFusion = <span class="keyword">new</span> FactorResultWrapper.ByReference();</span><br><span class="line">        factorFusion.state = <span class="keyword">new</span> Memory(STATE_SIZE * Native.getNativeSize(Float.TYPE));</span><br><span class="line">        factorFusion.state_size = STATE_SIZE;</span><br><span class="line">        factorFusion.comment = <span class="string">""</span>;</span><br><span class="line">        factorFusion.comment_len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByReference</span> <span class="keyword">extends</span> <span class="title">ReviewResult</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByReference</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FIELDS_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>TransformerWrapper</code></p><p>作为 C++ 中 结构体<code>Transformer</code>的封装类</p></li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jna.Structure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformerWrapper</span> <span class="keyword">extends</span> <span class="title">Structure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FIELDS_ORDER = createFieldsOrder(<span class="string">"h2Value"</span>, <span class="string">"totalHydrocarbon"</span>, <span class="string">"c2h2Value"</span>, <span class="string">"coValue"</span>, <span class="string">"co2Value"</span>, <span class="string">"dielectricLoss"</span>,</span><br><span class="line">            <span class="string">"dcResistance"</span>, <span class="string">"absorptance"</span>, <span class="string">"polarizeFactor"</span>, <span class="string">"electricCapacity"</span>, <span class="string">"moisture"</span>, <span class="string">"breakdownVoltage"</span>,</span><br><span class="line">            <span class="string">"oilDielectricLoss"</span>, <span class="string">"interfacialTension"</span>, <span class="string">"electricResistivity"</span>, <span class="string">"runningLife"</span>, <span class="string">"ambientTemperature"</span>,</span><br><span class="line">            <span class="string">"jointTemperature"</span>, <span class="string">"oilTankTemperature"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> h2Value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> totalHydrocarbon;        <span class="comment">// 总烃</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> c2h2Value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> coValue;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> co2Value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> dielectricLoss;        <span class="comment">// 介损</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> dcResistance;        <span class="comment">//直阻</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> absorptance;            <span class="comment">//吸收比</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> polarizeFactor;        <span class="comment">// 极化系数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> electricCapacity;        <span class="comment">// 电容量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> moisture;            <span class="comment">// 微水</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> breakdownVoltage;    <span class="comment">// 击穿电压</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> oilDielectricLoss;    <span class="comment">// 油介损</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> interfacialTension;    <span class="comment">//界面张力</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> electricResistivity; <span class="comment">//电阻率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">short</span> runningLife;        <span class="comment">// 运行年限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> ambientTemperature;    <span class="comment">// 环境温度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> jointTemperature;        <span class="comment">//接头温度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> oilTankTemperature;    <span class="comment">// 油箱温度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByReference</span> <span class="keyword">extends</span> <span class="title">TransformerWrapper</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByReference</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByValue</span> <span class="keyword">extends</span> <span class="title">TransformerWrapper</span> <span class="keyword">implements</span> <span class="title">Structure</span>.<span class="title">ByValue</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransformerWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FIELDS_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>CalculatorImpl</code></p><p>Java 接口的实现类，首先需要从 Jar 中解压 dll 到指定目录，然后通过此目录加载 dll。依赖关系为 Java 接口通过 JNA 加载<code>calculator.dll</code> ，而<code>calculator.dll</code>依赖 <code>pingjia.dll</code>和另外一个dll。</p><p>三个dll必须在同一目录下， JNA 只需要加载 <code>calculator.dll</code>。因为此处只是在 WIN32 平台执行，所以加载时，通过 <code>Native.loadLibrary</code> 加载的时候，在文件名前加了 <code>/</code>，否则 JNA 会在文件前增加平台相关的perfix导致加载失败。</p></li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log LOGGER = Logs.getLog(CalculatorImpl.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CalculatorApi CALCULATOR_API;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String current = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">            File matlab = <span class="keyword">new</span> File(current, <span class="string">"matlab"</span>);</span><br><span class="line">            System.setProperty(<span class="string">"java.library.path"</span>, matlab.getPath());</span><br><span class="line">            System.setProperty(<span class="string">"jna.library.path"</span>, matlab.getPath());</span><br><span class="line">          <span class="comment">// 从 Jar 包 resources 中解压 dll 到指定目录 </span></span><br><span class="line">          <span class="comment">// Files.createDirIfNoExists(matlab);</span></span><br><span class="line">            <span class="comment">// Files.clearDir(matlab);</span></span><br><span class="line">         </span><br><span class="line">           <span class="comment">// 加载 dll 并映射成 Java 接口</span></span><br><span class="line">            CALCULATOR_API = Native.loadLibrary(<span class="string">"/calculator.dll"</span>, CalculatorApi.class);</span><br><span class="line">          <span class="comment">// 初始化dll (C++ 实现)</span></span><br><span class="line">            <span class="keyword">int</span> ret = CALCULATOR_API.init();</span><br><span class="line">            LOGGER.debugf(<span class="string">"init calculator (%d)"</span>, ret);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4>使用</h4><ul><li><code>improveData</code> 数据清洗，需要根据Java Wrapper的接口，组织数据，内存都在 Java 端分配，由 Java 端负责回收。<code>Pointer</code>的内存分配，通过 <code>new Memory(size)</code>来分配。</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TwoTuple&lt;String, CalculationResult&gt; <span class="title">improveData</span><span class="params">(String label, List&lt;TwoTuple&lt;String, Float&gt;&gt; values)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> CalculatorException </span>&#123;</span><br><span class="line">        ImproveInputWrapper.ByReference inputsRef = <span class="keyword">new</span> ImproveInputWrapper.ByReference();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> valueSize = values.size();</span><br><span class="line">        ImproveInputWrapper[] inputs = (ImproveInputWrapper[]) inputsRef.toArray(valueSize);</span><br><span class="line">        LOGGER.debug(label + <span class="string">" inputs: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueSize; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TwoTuple&lt;String, Float&gt; entry = values.get(i);</span><br><span class="line">                Date date = FORMATTER.parse(entry.getKey());</span><br><span class="line">                inputs[i].time = date.getTime();</span><br><span class="line">                inputs[i].value = entry.getValue();</span><br><span class="line">                LOGGER.debugf(<span class="string">"%d: %s(%d) -&gt; %f"</span>, i, entry.getKey(), inputs[i].time, inputs[i].value);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                LOGGER.error(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ImproveResultWrapper.ByReference impResultRef = <span class="keyword">new</span> ImproveResultWrapper.ByReference();</span><br><span class="line">        impResultRef.abnormalData = <span class="keyword">new</span> Memory(valueSize * Native.getNativeSize(Float.TYPE));</span><br><span class="line">        impResultRef.abnormalData.setFloat(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        impResultRef.optimizeData = <span class="keyword">new</span> Memory(valueSize * Native.getNativeSize(Float.TYPE));</span><br><span class="line">        impResultRef.optimizeData.setFloat(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        impResultRef.abnormal_size = <span class="number">0</span>;</span><br><span class="line">        impResultRef.validPercent = <span class="number">0</span>;</span><br><span class="line">        impResultRef.optimize_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> flag = CALCULATOR_API.improve_data(inputsRef, inputs.length, impResultRef);</span><br><span class="line">        LOGGER.debug(<span class="string">"improve_data flag: "</span> + flag);</span><br><span class="line">        CalculationResult.CalculationResultBuilder builder = CalculationResult.CalculationResultBuilder</span><br><span class="line">                .aCalculationResult().withOriginalData(values);</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line"> builder.withValidPercent(impResultRef.validPercent).withValidSize(impResultRef.valid);</span><br><span class="line">            <span class="keyword">int</span> abnormalSize = impResultRef.abnormal_size;</span><br><span class="line">            LOGGER.debug(<span class="string">"abnormalSize: "</span> + abnormalSize);</span><br><span class="line">            <span class="keyword">if</span> (abnormalSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">float</span>[] abnormalValues = impResultRef.abnormalData.getFloatArray(<span class="number">0</span>, abnormalSize);</span><br><span class="line">                builder.withAbnormalData(Collections.unmodifiableList(Lang.array2list(abnormalValues, Float.class)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                builder.withAbnormalData(Collections.&lt;Float&gt;emptyList());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> optimizeSize = impResultRef.optimize_size;</span><br><span class="line">            LOGGER.debug(<span class="string">"optimizeSize: "</span> + optimizeSize);</span><br><span class="line">            <span class="keyword">if</span> (optimizeSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">float</span>[] optimizeValues = impResultRef.optimizeData.getFloatArray(<span class="number">0</span>, optimizeSize);</span><br><span class="line">                builder.withOptimizeData(Collections.unmodifiableList(Lang.array2list(optimizeValues, Float.class)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                builder.withOptimizeData(Collections.&lt;Float&gt;emptyList());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CalculationResult result = builder.build();</span><br><span class="line">        LOGGER.debug(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TwoTuple&lt;&gt;(label, result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>reviewTransformer</code> 机组状态评价，获取 <code>float *</code>的数据时候的，需要通过 <code>getFloatArray</code> 获取数据。</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TransformerResult <span class="title">reviewTransformer</span><span class="params">(Map&lt;String, Float&gt; values)</span> <span class="keyword">throws</span> CalculatorException </span>&#123;</span><br><span class="line">        TransformerWrapper.ByReference transformerRef = <span class="keyword">new</span> TransformerWrapper.ByReference();</span><br><span class="line">        setTransformer(transformerRef, values);</span><br><span class="line"></span><br><span class="line">        ReviewResult.ByReference reviewResultRef = <span class="keyword">new</span> ReviewResult.ByReference();</span><br><span class="line">        <span class="keyword">int</span> flag = CALCULATOR_API.review_transformer(transformerRef, reviewResultRef);</span><br><span class="line">        LOGGER.debugf(<span class="string">"review_transformer flag: %d"</span>, flag);</span><br><span class="line"></span><br><span class="line">        TransformerResult result = <span class="keyword">new</span> TransformerResult();</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span>[] states = reviewResultRef.factorFusion.state.getFloatArray(<span class="number">0</span>,</span><br><span class="line">                    reviewResultRef.factorFusion.state_size);</span><br><span class="line">            result.setState(states).setComment(reviewResultRef.factorFusion.comment);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span>[] h1 = reviewResultRef.indexFusion.h1.getFloatArray(<span class="number">0</span>, reviewResultRef.indexFusion.h1_size);</span><br><span class="line">            result.setH1(h1);</span><br><span class="line">            <span class="keyword">float</span>[] h2 = reviewResultRef.indexFusion.h2.getFloatArray(<span class="number">0</span>, reviewResultRef.indexFusion.h2_size);</span><br><span class="line">            result.setH2(h2);</span><br><span class="line">            <span class="keyword">float</span>[] h3 = reviewResultRef.indexFusion.h3.getFloatArray(<span class="number">0</span>, reviewResultRef.indexFusion.h3_size);</span><br><span class="line">            result.setH3(h3);</span><br><span class="line">            <span class="keyword">float</span>[] h4 = reviewResultRef.indexFusion.h4.getFloatArray(<span class="number">0</span>, reviewResultRef.indexFusion.h4_size);</span><br><span class="line">            result.setH4(h4);</span><br><span class="line">            result.setQz1(reviewResultRef.indexFusion.qz1).setQz2(reviewResultRef.indexFusion.qz2)</span><br><span class="line">                    .setQz3(reviewResultRef.indexFusion.qz3).setQz4(reviewResultRef.indexFusion.qz4)</span><br><span class="line">                    .setM(reviewResultRef.indexFusion.m).setN(reviewResultRef.indexFusion.n);</span><br><span class="line"></span><br><span class="line">            TransformerWrapper[] wrappers = (TransformerWrapper[]) reviewResultRef.indexScore.toArray(reviewResultRef.indexScore_size);</span><br><span class="line">            Transformer[] transformers = transformerWrapperToTransformer(wrappers);</span><br><span class="line">            result.setTransformers(transformers);</span><br><span class="line">            LOGGER.debug(<span class="string">"transfer review result."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3>小结</h3><ul><li>优点<ul><li>Java 端不需要编写C/C++代码</li></ul></li><li>缺点<ul><li>需要编写与 C/C++ 对应的结构体映射，碰到复杂的结构体工作量不小</li><li>结构体指针/数据通过 <code>toArray</code>获取数据时，效率较低，尤其时数据量比较大的时候</li><li>如果时C/C++端分配的内存，Java 端管理不了，如果C/C++不提供显式回收接口，会导致内存泄露</li><li>代码不规范，破坏了OO封装性，比如 field 必须要 Public</li><li>需要实现 <code>Structure.ByReference</code>接口，这些明显都可以通过注解来解决</li></ul></li></ul><p>---EOF---</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;缘起&lt;/h3&gt;
&lt;p&gt;项目中调用了第三方一个 Matlab 实现的数据清洗和机组状态评价的算法，但是对方不会除 Matlab 外的其他语言，最后只用 Matlab 生成了一个 dll/lib 文件。由于对方提供的接口质量真心不好，而且对方也无力修改。最终方案只好由我方在其
      
    
    </summary>
    
      <category term="Programming" scheme="https://gythialy.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://gythialy.github.io/tags/Java/"/>
    
      <category term="C" scheme="https://gythialy.github.io/tags/C/"/>
    
      <category term="JNA" scheme="https://gythialy.github.io/tags/JNA/"/>
    
  </entry>
  
  <entry>
    <title>GPG 导入导出 Key</title>
    <link href="https://gythialy.github.io/Howto-import-export-gpg-key/"/>
    <id>https://gythialy.github.io/Howto-import-export-gpg-key/</id>
    <published>2017-03-22T07:26:05.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<p>在多台电脑上操作的时候经常会涉及到 GPG 公钥/私钥的导入导出，比方说 GitHub 支持 GPG 加密 Commit，在多台电脑上使用相同的 Key 可以省去很多配置工作。</p><h2>列出本地的所有 Key</h2><p>执行 <code>gpg --list-keys</code> 列出本地所有的密钥</p><p>输出结果类似</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> $ gpg --list-keys /home/$USER/.gnupg/pubring.gpg </span><br><span class="line"> ----------------------------------- </span><br><span class="line">pub   4 096R/375A500B 2017-03-22 [有效至：2018-03-22] </span><br><span class="line">uid                  Goren G (Git) &lt;gythialy.koo+git@gmail.com&gt; </span><br><span class="line">sub   4096R/ADB9D36C 2017-03-22 [有效至：2018-03-22]</span><br></pre></td></tr></table></figure></p><h2>导出</h2><p>根据 <code>375A500B</code> 导出相应的公钥和私钥</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --output mygpgkey_pub.gpg --armor --export 375A500B</span><br><span class="line">gpg --output mygpgkey_sec.gpg --armor --export-secret-key 375A500B</span><br></pre></td></tr></table></figure></p><h2>导入</h2><p>导入刚导入的文件</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --import ~/mygpgkey_pub.gpg</span><br><span class="line">gpg --allow-secret-key-import --import ~/mygpgkey_sec.gpg</span><br></pre></td></tr></table></figure></p><p>---EOF---</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在多台电脑上操作的时候经常会涉及到 GPG 公钥/私钥的导入导出，比方说 GitHub 支持 GPG 加密 Commit，在多台电脑上使用相同的 Key 可以省去很多配置工作。&lt;/p&gt;
&lt;h2&gt;列出本地的所有 Key&lt;/h2&gt;
&lt;p&gt;执行 &lt;code&gt;gpg --list-
      
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="gpg" scheme="https://gythialy.github.io/tags/gpg/"/>
    
  </entry>
  
  <entry>
    <title>babun 配置</title>
    <link href="https://gythialy.github.io/babun-config/"/>
    <id>https://gythialy.github.io/babun-config/</id>
    <published>2016-05-04T01:09:36.000Z</published>
    <updated>2018-08-16T08:02:00.276Z</updated>
    
    <content type="html"><![CDATA[<h2>介绍</h2><p>babun 号称是开箱即用的，本质是上就是 cygwin 加上了一些预设的配置。特性如下:</p><ul><li>Pre-configured Cygwin with a lot of addons</li><li>Silent command-line installer, no admin rights required</li><li>pact - advanced package manager (like apt-get or yum)</li><li>xTerm-256 compatible console</li><li>HTTP(s) proxying support</li><li>Plugin-oriented architecture</li><li>Pre-configured git and shell</li><li>Integrated oh-my-zsh</li><li>Auto update feature</li><li>&quot;Open Babun Here&quot; context menu entry</li></ul><h2>安装</h2><p>下载<a href="http://projects.reficio.org/babun/download" target="_blank" rel="noopener">安装包</a>解压缩到任意目录后，运行 <code>install.bat</code>。也可以使用 <code>/t %target_folder%</code> 指定安装目录。</p><h2>配置</h2><p>既然是开箱即用，对大多数人来说当然不需要太多配置，一般需要以下两个命令：</p><ul><li><code>babun check</code> 用于判断环境是否正确</li><li><code>babun update</code> 用于判断是否有新的更新包</li></ul><h2>包管理</h2><p>babun 自带了叫做 <code>pact</code> 的包管理，修改自 <code>apt-cyg</code>, 但比较弱，用法如下：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123; ~ &#125;  » pact --help</span><br><span class="line">pact: Installs and removes Cygwin packages.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  "pact install &lt;package names&gt;" to install given packages</span><br><span class="line">  "pact remove &lt;package names&gt;" to remove given packages</span><br><span class="line">  "pact update &lt;package names&gt;" to update given packages</span><br><span class="line">  "pact show" to show installed packages</span><br><span class="line">  "pact find &lt;patterns&gt;" to find packages matching patterns</span><br><span class="line">  "pact describe &lt;patterns&gt;" to describe packages matching patterns</span><br><span class="line">  "pact packageof &lt;commands or files&gt;" to locate parent packages</span><br><span class="line">  "pact invalidate" to invalidate pact caches (setup.ini, etc.)</span><br><span class="line">Options:</span><br><span class="line">  --mirror, -m &lt;url&gt; : set mirror</span><br><span class="line">  --invalidate, -i       : invalidates pact caches (setup.ini, etc.)</span><br><span class="line">  --force, -f : force the execution</span><br><span class="line">  --help</span><br><span class="line">  --version</span><br></pre></td></tr></table></figure></p><h2>和 Windows 共享配置</h2><ol><li>添加环境变量 <code>HOME</code>，值为 Windows 的用户目录 <code>C:\Users\%USERNAME%</code></li><li>启动 babun，执行 <code>babun install</code>，重启 babun</li></ol><blockquote><p>%USERNAME% 不能包含空格。如果用户名已经有空格，参考<a href="https://cygwin.com/faq.html#faq.setup.name-with-space" target="_blank" rel="noopener">这里</a>解决。</p></blockquote><h2>代理设置</h2><p>只需要取消 <code>.babunrc</code> 中的注释 (<code>%USERPROFILE%\.babunrc</code>)</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment this lines to set up your proxy</span><br><span class="line">export http_proxy=user:password@server:port</span><br><span class="line">export https_proxy=$http_proxy</span><br><span class="line">export ftp_proxy=$http_proxy</span><br><span class="line">export no_proxy=localhost</span><br></pre></td></tr></table></figure></p><h2>镜像</h2><p>修改 <code>~/.pact/pact.repo</code> 中的 <code>PACT_REPO</code> 字段</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#PACT_REPO=http://mirrors.kernel.org/sourceware/cygwin/</span><br><span class="line">PACT_REPO=http://mirrors.neusoft.edu.cn/cygwin/</span><br><span class="line"></span><br><span class="line"># POPULAR HTTP REPOSITORIES</span><br><span class="line"># http://mirror.switch.ch/ftp/mirror/cygwin/</span><br><span class="line"></span><br><span class="line"># POPULAR FTP REPOSITORIES</span><br><span class="line"># ftp://mirror.switch.ch/mirror/cygwin/</span><br><span class="line"># ftp://ftp.inf.tu-dresden.de/software/windows/cygwin32/</span><br><span class="line"># ftp://mirrors.kernel.org/sourceware/cygwin/</span><br><span class="line"># ftp://gd.tuwien.ac.at/gnu/cygwin/</span><br><span class="line"># ftp://ftp.iij.ad.jp/pub/cygwin/</span><br><span class="line"># ftp://mirror.cpsc.ucalgary.ca/cygwin.com/</span><br><span class="line"></span><br><span class="line"># FULL LIST</span><br><span class="line"># http://cygwin.com/mirrors.html</span><br></pre></td></tr></table></figure></p><h2>常用开发环境配置</h2><h3>Python</h3><p>babun 自带的 Python2 并没有安装 pip，需要手动安装</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pact install python-setuptools python-ming</span><br><span class="line">pact install libxml2-devel libxslt-devel libyaml-devel</span><br><span class="line">curl -skS https://bootstrap.pypa.io/get-pip.py | python</span><br></pre></td></tr></table></figure></p><h3>Ruby</h3><p>执行 <code>pact install ruby</code></p><blockquote><p>如果 <code>ruby -v</code> 不能返回版本，执行 <code>update.bat</code> 更新 cygwin 的版本。via <a href="https://github.com/babun/babun/issues/483" target="_blank" rel="noopener">Issue #483</a></p></blockquote><h2>FAQ</h2><ul><li><p>compdef: unknown command or service: git<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ compinit</span><br><span class="line">$ cp .zcompdump .zcompdump-$HOSTNAME-$ZSH_VERSION</span><br></pre></td></tr></table></figure></p></li><li><p>删除右键中的 <code>Open Babun here</code><br>执行 <code>babun shell-here remove</code></p></li><li><p>与 ConEmu 集成<br><code>%userprofile%\.babun\cygwin\bin\mintty.exe /bin/env CHERE_INVOKING=1 /bin/zsh.exe</code><img src="/uploads/conemu_1.png" alt="ConEmu Settings"></p></li><li><p>X64<br>官方对于 64 位的<a href="https://github.com/babun/babun/wiki/64-bit" target="_blank" rel="noopener">解释</a>。懒人也可以直接使用这个 <a href="https://github.com/babun/babun/pull/545" target="_blank" rel="noopener">PR</a> 编译的<a href="https://people.mozilla.org/%7Enchen/babun/babun-1.2.1-x86_64-dist.zip" target="_blank" rel="noopener">分发包</a>。有兴趣的也可以通过我合并的 <a href="https://github.com/gythialy/babun/tree/support-64-bit" target="_blank" rel="noopener">x64 分支</a> 自行构建。</p></li></ul><h2>总结</h2><p>总的来说，babun 比 <a href="/msys2-config/" title="MSYS2">MSYS2</a> 慢，包也不多，稳定性/兼容性貌似好一点。</p><p>最终配置效果：</p><p><img src="/uploads/babun.png" alt="babun"></p><p>---EOF---</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;babun 号称是开箱即用的，本质是上就是 cygwin 加上了一些预设的配置。特性如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pre-configured Cygwin with a lot of addons&lt;/li&gt;
&lt;li&gt;Silent command
      
    
    </summary>
    
      <category term="Notes" scheme="https://gythialy.github.io/categories/Notes/"/>
    
    
      <category term="babun" scheme="https://gythialy.github.io/tags/babun/"/>
    
  </entry>
  
</feed>
